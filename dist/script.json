db.bitbloq_Bloqs.remove({});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqHexapodLateralDisplacement",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-hexapod-lateraldisplacement",
  "content": [
    [
      {
        "alias": "text",
        "value": "lateraldisplacement-moveto"
      },
      {
        "id": "SIDE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "right",
            "value": "RIGHT"
          },
          {
            "label": "left",
            "value": "LEFT"
          }
        ]
      },
      {
        "id": "STEPS",
        "alias": "numberInput",
        "value": 3
      },
      {
        "alias": "text",
        "value": "steps"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqHexapod"
    ],
    "needInstanceOf": [
      {
        "name": "hexapod",
        "type": "BotbloqHexapod"
      }
    ],
    "codeLines": [
      {
        "code": "hexapod.lateralDisplacement(\"{SIDE}\", {STEPS})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqHexapodMove",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-hexapod-move",
  "content": [
    [
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "forward",
            "value": "FORWARD"
          },
          {
            "label": "backward",
            "value": "BACKWARD"
          },
          {
            "label": "turn-right",
            "value": "TURN_RIGHT"
          },
          {
            "label": "turn-left",
            "value": "TURN_LEFT"
          }
        ]
      },
      {
        "id": "STEPS",
        "alias": "numberInput",
        "value": 3
      },
      {
        "alias": "text",
        "value": "steps"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqHexapod"
    ],
    "needInstanceOf": [
      {
        "name": "hexapod",
        "type": "BotbloqHexapod"
      }
    ],
    "codeLines": [
      {
        "code": "hexapod.move(\"{MOVEMENT}\", {STEPS})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqHexapodStop",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-hexapod-stop",
  "content": [
    [
      {
        "alias": "text",
        "value": "stop"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqHexapod"
    ],
    "needInstanceOf": [
      {
        "name": "hexapod",
        "type": "BotbloqHexapod"
      }
    ],
    "codeLines": [
      {
        "code": "hexapod.stop()"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqHumanBendDown",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-human-benddown",
  "content": [
    [
      {
        "alias": "text",
        "value": "benddown"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqHuman"
    ],
    "needInstanceOf": [
      {
        "name": "human",
        "type": "BotbloqHuman"
      }
    ],
    "codeLines": [
      {
        "code": "human.benddown()"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqHumanLateralDisplacement",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-human-lateraldisplacement",
  "content": [
    [
      {
        "alias": "text",
        "value": "lateraldisplacement-moveto"
      },
      {
        "id": "FOOT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "right",
            "value": "RIGHT"
          },
          {
            "label": "left",
            "value": "LEFT"
          }
        ]
      },
      {
        "id": "STEPS",
        "alias": "numberInput",
        "value": 3
      },
      {
        "alias": "text",
        "value": "steps"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqHuman"
    ],
    "needInstanceOf": [
      {
        "name": "human",
        "type": "BotbloqHuman"
      }
    ],
    "codeLines": [
      {
        "code": "human.lateralDisplacement(\"{FOOT}\", {STEPS})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqHumanMove",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-human-move",
  "content": [
    [
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "forward",
            "value": "FORWARD"
          },
          {
            "label": "backward",
            "value": "BACKWARD"
          },
          {
            "label": "turn-right",
            "value": "TURN_RIGHT"
          },
          {
            "label": "turn-left",
            "value": "TURN_LEFT"
          }
        ]
      },
      {
        "id": "STEPS",
        "alias": "numberInput",
        "value": 3
      },
      {
        "alias": "text",
        "value": "steps"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqHuman"
    ],
    "needInstanceOf": [
      {
        "name": "human",
        "type": "BotbloqHuman"
      }
    ],
    "codeLines": [
      {
        "code": "human.move(\"{MOVEMENT}\", {STEPS})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqHumanRotateByFoot",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-human-rotatefoot",
  "content": [
    [
      {
        "alias": "text",
        "value": "rotate"
      },
      {
        "id": "DEGREES",
        "alias": "numberInput",
        "value": 45
      },
      {
        "alias": "text",
        "value": "rotate-grades-foot"
      },
      {
        "id": "FOOT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "right",
            "value": "RIGHT"
          },
          {
            "label": "left",
            "value": "LEFT"
          }
        ]
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqHuman"
    ],
    "needInstanceOf": [
      {
        "name": "human",
        "type": "BotbloqHuman"
      }
    ],
    "codeLines": [
      {
        "code": "human.rotateByFoot({DEGREES},\"{FOOT}\")"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqHumanStop",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-human-stop",
  "content": [
    [
      {
        "alias": "text",
        "value": "stop"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqHuman"
    ],
    "needInstanceOf": [
      {
        "name": "human",
        "type": "BotbloqHuman"
      }
    ],
    "codeLines": [
      {
        "code": "human.stop()"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqHumanUpstairs",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-human-upstairs",
  "content": [
    [
      {
        "alias": "text",
        "value": "upstairs"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqHuman"
    ],
    "needInstanceOf": [
      {
        "name": "human",
        "type": "BotbloqHuman"
      }
    ],
    "codeLines": [
      {
        "code": "human.upstairs()"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "botbloqManipulatorCanMoveAdvanced",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "59927cfa-c512-472b-af9c-0d41ebd0fd5f"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "e6013351-ef25-4aaf-89f9-b1eb7d9ad315"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "5c75eb6a-c604-4c3a-a0c7-1c51d9f14312"
    }
  ],
  "bloqClass": "bloq-botbloq-manipulator-canmove",
  "content": [
    [
      {
        "alias": "text",
        "value": "can-move-to"
      },
      {
        "alias": "text",
        "value": "x:"
      },
      {
        "bloqInputId": "X",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "59927cfa-c512-472b-af9c-0d41ebd0fd5f"
      },
      {
        "alias": "text",
        "value": "y:"
      },
      {
        "bloqInputId": "Y",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "e6013351-ef25-4aaf-89f9-b1eb7d9ad315"
      },
      {
        "alias": "text",
        "value": "z:"
      },
      {
        "bloqInputId": "Z",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "5c75eb6a-c604-4c3a-a0c7-1c51d9f14312"
      },
      {
        "alias": "text",
        "value": "?"
      }
    ]
  ],
  "code": "",
  "returnType": {
    "type": "simple",
    "value": "bool"
  },
  "python": {
    "libraries": [
      "BotbloqManipulator"
    ],
    "needInstanceOf": [
      {
        "name": "manipulator",
        "type": "BotbloqManipulator"
      }
    ],
    "codeLines": [
      {
        "code": "vehicle.canMove({X}, {Y}, {Z})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqManipulatorMoveOnSpaceAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "1dfb1a73-84a4-432e-9551-e8650ac5d811"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "9ee3fe5d-a5ba-456d-a02a-5e63b5b5f29e"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "f3478b79-cb7a-4547-9f15-df921d5f3a34"
    }
  ],
  "bloqClass": "bloq-botbloq-manipulator-moveonspace",
  "content": [
    [
      {
        "alias": "text",
        "value": "move-to"
      },
      {
        "alias": "text",
        "value": "x:"
      },
      {
        "bloqInputId": "X",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "1dfb1a73-84a4-432e-9551-e8650ac5d811"
      },
      {
        "alias": "text",
        "value": "y:"
      },
      {
        "bloqInputId": "Y",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "9ee3fe5d-a5ba-456d-a02a-5e63b5b5f29e"
      },
      {
        "alias": "text",
        "value": "z:"
      },
      {
        "bloqInputId": "Z",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "f3478b79-cb7a-4547-9f15-df921d5f3a34"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqManipulator"
    ],
    "needInstanceOf": [
      {
        "name": "manipulator",
        "type": "BotbloqManipulator"
      }
    ],
    "codeLines": [
      {
        "code": "manipulator.move({X}, {Y}, {Z})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "botbloqManipulatorCanMove",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-botbloq-manipulator-canmove",
  "content": [
    [
      {
        "alias": "text",
        "value": "can-move-to"
      },
      {
        "alias": "text",
        "value": "x:"
      },
      {
        "id": "X",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "y:"
      },
      {
        "id": "Y",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "z:"
      },
      {
        "id": "Z",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "?"
      }
    ]
  ],
  "code": "",
  "returnType": {
    "type": "simple",
    "value": "bool"
  },
  "python": {
    "libraries": [
      "BotbloqManipulator"
    ],
    "needInstanceOf": [
      {
        "name": "manipulator",
        "type": "BotbloqManipulator"
      }
    ],
    "codeLines": [
      {
        "code": "vehicle.canMove({X}, {Y}, {Z})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqManipulatorMoveOnSpace",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-manipulator-moveonspace",
  "content": [
    [
      {
        "alias": "text",
        "value": "move-to"
      },
      {
        "alias": "text",
        "value": "x:"
      },
      {
        "id": "X",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "y:"
      },
      {
        "id": "Y",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "z:"
      },
      {
        "id": "Z",
        "alias": "numberInput",
        "value": 0
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqManipulator"
    ],
    "needInstanceOf": [
      {
        "name": "manipulator",
        "type": "BotbloqManipulator"
      }
    ],
    "codeLines": [
      {
        "code": "manipulator.move({X}, {Y}, {Z})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqManipulatorMoveClamp",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-manipulator-moveclamp",
  "content": [
    [
      {
        "id": "ACTION",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "open",
            "value": true
          },
          {
            "label": "close",
            "value": false
          }
        ]
      },
      {
        "alias": "text",
        "value": "the-clamp"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqManipulator"
    ],
    "needInstanceOf": [
      {
        "name": "manipulator",
        "type": "BotbloqManipulator"
      }
    ],
    "codeLines": [
      {
        "code": "manipulator.moveClamp({ACTION})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqManipulatorRotateJoints",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-manipulator-rotatejoints",
  "content": [
    [
      {
        "alias": "text",
        "value": "move-joint"
      },
      {
        "id": "JOINT_NUMBER",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "1",
            "value": "1"
          },
          {
            "label": "2",
            "value": "2"
          },
          {
            "label": "3",
            "value": "3"
          }
        ]
      },
      {
        "id": "DEGREES",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "degrees"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqManipulator"
    ],
    "needInstanceOf": [
      {
        "name": "manipulator",
        "type": "BotbloqManipulator"
      }
    ],
    "codeLines": [
      {
        "code": "manipulator.moveJoint({JOINT_NUMBER}, {DEGREES})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqSnakeLateralDisplacement",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-snake-lateraldisplacement",
  "content": [
    [
      {
        "alias": "text",
        "value": "lateraldisplacement-moveto"
      },
      {
        "id": "SIDE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "right",
            "value": "RIGHT"
          },
          {
            "label": "left",
            "value": "LEFT"
          }
        ]
      },
      {
        "alias": "text",
        "value": "move-for"
      },
      {
        "id": "DELAY",
        "alias": "numberInput",
        "value": 1000
      },
      {
        "alias": "text",
        "value": "ms"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqSnake"
    ],
    "needInstanceOf": [
      {
        "name": "snake",
        "type": "BotbloqSnake"
      }
    ],
    "codeLines": [
      {
        "code": "snake.lateralDisplacement(\"{SIDE}\", {DELAY})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqSnakeMove",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-snake-move",
  "content": [
    [
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "forward.",
            "value": "FORWARD"
          },
          {
            "label": "backward.",
            "value": "BACKWARD"
          }
        ]
      },
      {
        "alias": "text",
        "value": "move-for"
      },
      {
        "id": "DELAY",
        "alias": "numberInput",
        "value": 1000
      },
      {
        "alias": "text",
        "value": "ms"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqSnake"
    ],
    "needInstanceOf": [
      {
        "name": "snake",
        "type": "BotbloqSnake"
      }
    ],
    "codeLines": [
      {
        "code": "snake.move(\"{MOVEMENT}\", {DELAY})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqSnakeRoll",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-snake-roll",
  "content": [
    [
      {
        "alias": "text",
        "value": "roll-to"
      },
      {
        "id": "SIDE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "right",
            "value": "RIGHT"
          },
          {
            "label": "left",
            "value": "LEFT"
          }
        ]
      },
      {
        "alias": "text",
        "value": "move-for"
      },
      {
        "id": "DELAY",
        "alias": "numberInput",
        "value": 1000
      },
      {
        "alias": "text",
        "value": "ms"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqSnake"
    ],
    "needInstanceOf": [
      {
        "name": "snake",
        "type": "BotbloqSnake"
      }
    ],
    "codeLines": [
      {
        "code": "snake.roll(\"{SIDE}\", {DELAY})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqSnakeRotate",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-snake-rotate",
  "content": [
    [
      {
        "alias": "text",
        "value": "roll-to"
      },
      {
        "id": "SIDE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "right",
            "value": "RIGHT"
          },
          {
            "label": "left",
            "value": "LEFT"
          }
        ]
      },
      {
        "alias": "text",
        "value": "move-for"
      },
      {
        "id": "DELAY",
        "alias": "numberInput",
        "value": 1000
      },
      {
        "alias": "text",
        "value": "ms"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqSnake"
    ],
    "needInstanceOf": [
      {
        "name": "snake",
        "type": "BotbloqSnake"
      }
    ],
    "codeLines": [
      {
        "code": "snake.rotate(\"{SIDE}\", {DELAY})"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqSnakeStop",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-snake-stop",
  "content": [
    [
      {
        "alias": "text",
        "value": "stop"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqSnake"
    ],
    "needInstanceOf": [
      {
        "name": "snake",
        "type": "BotbloqSnake"
      }
    ],
    "codeLines": [
      {
        "code": "snake.stop()"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "botbloqVehicleIRSensor",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-botbloq-vehicle-ir",
  "content": [
    [
      {
        "alias": "text",
        "value": "read-sensor"
      },
      {
        "id": "SIDE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "right",
            "value": "RIGHT"
          },
          {
            "label": "left",
            "value": "LEFT"
          }
        ]
      }
    ]
  ],
  "code": "",
  "returnType": {
    "type": "simple",
    "value": "int"
  },
  "python": {
    "libraries": [
      "BotbloqVehicle"
    ],
    "needInstanceOf": [
      {
        "name": "vehicle",
        "type": "BotbloqVehicle"
      }
    ],
    "codeLines": [
      {
        "code": "vehicle.readIRSensor(\"{SIDE}\")"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqVehicleMove",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-vehicle-move",
  "content": [
    [
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "forward",
            "value": "FORWARD"
          },
          {
            "label": "backward",
            "value": "BACKWARD"
          },
          {
            "label": "turn-right",
            "value": "TURN_RIGHT"
          },
          {
            "label": "turn-left",
            "value": "TURN_LEFT"
          }
        ]
      },
      {
        "alias": "text",
        "value": "move-for"
      },
      {
        "id": "DELAY",
        "alias": "numberInput",
        "value": 1000
      },
      {
        "alias": "text",
        "value": "ms-at-speed-of"
      },
      {
        "id": "SPEED",
        "alias": "numberInput",
        "value": 5
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqVehicle"
    ],
    "needInstanceOf": [
      {
        "name": "vehicle",
        "type": "BotbloqVehicle"
      }
    ],
    "codeLines": [
      {
        "code": "vehicle.move(\"{DELAY}\",\"{SPEED}\",\"{MOVEMENT}\")"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "botbloqVehicleStop",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-botbloq-vehicle-stop",
  "content": [
    [
      {
        "alias": "text",
        "value": "stop"
      }
    ]
  ],
  "code": "",
  "python": {
    "libraries": [
      "BotbloqVehicle"
    ],
    "needInstanceOf": [
      {
        "name": "vehicle",
        "type": "BotbloqVehicle"
      }
    ],
    "codeLines": [
      {
        "code": "vehicle.stop()"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "arrayClassVariable",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-array-class-variable",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-array-class-variable-variable"
      },
      {
        "id": "VAR",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      },
      {
        "alias": "text",
        "value": "["
      },
      {
        "id": "POSITION",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "]"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-class-function-class"
      },
      {
        "id": "CLASS",
        "alias": "dynamicDropdown",
        "options": "objects"
      }
    ]
  ],
  "code": "{CLASS}.{VAR}[{POSITION}]",
  "returnType": {
    "type": "fromDynamicDropdown",
    "idDropdown": "VAR",
    "pointer": "true",
    "options": "softwareVars"
  },
  "arduino": {
    "code": "{CLASS}.{VAR}[{POSITION}]"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"arrayClassVariable\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "classChildren",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-class-children",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-class"
      },
      {
        "id": "NAME",
        "alias": "varInput",
        "placeholder": "bloq-name-default"
      },
      {
        "alias": "text",
        "value": "bloq-class-inheritance-type"
      },
      {
        "id": "TYPE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-class-inheritance-public",
            "value": "public"
          },
          {
            "label": "bloq-class-inheritance-protected",
            "value": "protected"
          },
          {
            "label": "bloq-class-inheritance-private",
            "value": "private"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-class-from"
      },
      {
        "id": "PARENT",
        "alias": "dynamicDropdown",
        "options": "classes"
      }
    ]
  ],
  "createDynamicContent": "classes",
  "code": "class {NAME} : public {PARENT}{{STATEMENTS}};",
  "returnType": {
    "type": "simple",
    "value": "class"
  },
  "arduino": {
    "code": "class {NAME} : public {PARENT}{{STATEMENTS}};"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"classChildren\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "constructorClassArguments",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "argument",
        "arguments",
        "number",
        "string",
        "selectVariable"
      ],
      "name": "76be7c3d-12c2-4bc2-8b69-89d16a423f5d"
    }
  ],
  "bloqClass": "bloq-constructor-arguments",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-constructor-arguments"
      },
      {
        "bloqInputId": "ARGS",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "argument",
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "76be7c3d-12c2-4bc2-8b69-89d16a423f5d"
      }
    ]
  ],
  "code": "{CLASS-OUTSIDE} ({ARGS}){{STATEMENTS}};",
  "arduino": {
    "code": "{CLASS-OUTSIDE} ({ARGS}){{STATEMENTS}};"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"constructorClassArguments\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "invokeArgumentsClass",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "arguments",
        "number",
        "string",
        "selectVariable"
      ],
      "name": "a1c0ff8d-1b6b-47c2-9943-d8fd450da986"
    }
  ],
  "bloqClass": "bloq-invoke-arguments-class",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-invoke-arguments-class"
      },
      {
        "id": "CLASS",
        "alias": "dynamicDropdown",
        "options": "classes"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-arguments-class-name"
      },
      {
        "id": "NAME",
        "alias": "varInput",
        "placeholder": "bloq-name-default"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-arguments-args"
      },
      {
        "bloqInputId": "ARGS",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "a1c0ff8d-1b6b-47c2-9943-d8fd450da986"
      }
    ]
  ],
  "createDynamicContent": "objects",
  "code": "{CLASS} {NAME}({ARGS});",
  "returnType": {
    "type": "simple",
    "value": "var"
  },
  "arduino": {
    "code": "{CLASS} {NAME}({ARGS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"invokeArgumentsClass\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "invokeClassFunctionWithArguments",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "arguments",
        "number",
        "string",
        "selectVariable"
      ],
      "name": "6ee405b1-9627-430e-9510-d46116ab8934"
    }
  ],
  "bloqClass": "bloq-invoke-class-function-args",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-invoke-class-function-exec"
      },
      {
        "id": "FUNCTION",
        "alias": "dynamicDropdown",
        "options": "voidFunctions"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-class-function-class"
      },
      {
        "id": "CLASS",
        "alias": "dynamicDropdown",
        "options": "objects"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-class-function-args"
      },
      {
        "bloqInputId": "ARGS",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "6ee405b1-9627-430e-9510-d46116ab8934"
      }
    ]
  ],
  "code": "{CLASS}.{FUNCTION}({ARGS});",
  "dynamicDropdown": {
    "idDropdown": "FUNCTION",
    "options": "voidFunctions"
  },
  "arduino": {
    "code": "{CLASS}.{FUNCTION}({ARGS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"invokeClassFunctionWithArguments\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "invokeClassReturnFunctionWithArguments",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "arguments",
        "number",
        "string",
        "selectVariable"
      ],
      "name": "d5812716-6e82-4b91-b44d-1a8e1dd28523"
    }
  ],
  "bloqClass": "bloq-invoke-class-return-function",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-invoke-class-return-function-args-exec"
      },
      {
        "id": "FUNCTION",
        "alias": "dynamicDropdown",
        "options": "returnFunctions"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-class-return-function-args-class"
      },
      {
        "id": "CLASS",
        "alias": "dynamicDropdown",
        "options": "objects"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-class-return-function-args-args"
      },
      {
        "bloqInputId": "ARGS",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "d5812716-6e82-4b91-b44d-1a8e1dd28523"
      }
    ]
  ],
  "code": "{CLASS}.{FUNCTION}({ARGS});",
  "returnType": {
    "type": "fromDynamicDropdown",
    "idDropdown": "FUNCTION",
    "options": "returnFunctions"
  },
  "arduino": {
    "code": "{CLASS}.{FUNCTION}({ARGS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"invokeClassReturnFunctionWithArguments\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "private",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-private",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-private"
      }
    ]
  ],
  "code": "private : {STATEMENTS}",
  "arduino": {
    "code": "private : {STATEMENTS}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"private\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "protected",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-protected",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-protected"
      }
    ]
  ],
  "code": "protected : {STATEMENTS}",
  "arduino": {
    "code": "protected : {STATEMENTS}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"protected\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "public",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-public",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-public"
      }
    ]
  ],
  "code": "public : {STATEMENTS}",
  "arduino": {
    "code": "public : {STATEMENTS}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"public\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "setClassArrayVariable",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": {
        "type": "fromDynamicDropdown",
        "idDropdown": "NAME",
        "pointer": "true",
        "options": "softwareVars"
      },
      "suggestedBloqs": [
        "number",
        "basicOperations",
        "string",
        "stringSum"
      ],
      "name": "2cc6ddd2-a60f-4ff7-b95a-e91d35c0cb13"
    }
  ],
  "bloqClass": "bloq-set-class-variableArray",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-set-class-variableArray-variable"
      },
      {
        "id": "NAME",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      },
      {
        "alias": "text",
        "value": "["
      },
      {
        "id": "ITERATOR",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "]"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-class-function-class"
      },
      {
        "id": "CLASS",
        "alias": "dynamicDropdown",
        "options": "objects"
      },
      {
        "alias": "text",
        "value": "="
      },
      {
        "bloqInputId": "VALUE",
        "alias": "bloqInput",
        "acceptType": {
          "type": "fromDynamicDropdown",
          "idDropdown": "NAME",
          "pointer": "true",
          "options": "softwareVars"
        },
        "suggestedBloqs": [
          "number",
          "basicOperations",
          "string",
          "stringSum"
        ],
        "name": "2cc6ddd2-a60f-4ff7-b95a-e91d35c0cb13"
      }
    ]
  ],
  "code": "{CLASS}.{NAME}[{ITERATOR}] = {VALUE};",
  "arduino": {
    "code": "{CLASS}.{NAME}[{ITERATOR}] = {VALUE};"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"setClassArrayVariable\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "class",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-class",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-class"
      },
      {
        "id": "NAME",
        "alias": "varInput",
        "placeholder": "bloq-name-default"
      }
    ]
  ],
  "createDynamicContent": "classes",
  "code": "class {NAME}{{STATEMENTS}};",
  "returnType": {
    "type": "simple",
    "value": "class"
  },
  "arduino": {
    "code": "class {NAME}{{STATEMENTS}};"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"class\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "constructorClass",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-constructor",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-constructor"
      }
    ]
  ],
  "code": "{CLASS-OUTSIDE}(){{STATEMENTS}};",
  "arduino": {
    "code": "\n${CLASS-OUTSIDE}(){{STATEMENTS}};"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"constructorClass\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "invokeClass",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-invoke-class",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-invoke-class"
      },
      {
        "id": "CLASS",
        "alias": "dynamicDropdown",
        "options": "classes"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-class-name"
      },
      {
        "id": "NAME",
        "alias": "varInput",
        "value": ""
      }
    ]
  ],
  "createDynamicContent": "objects",
  "code": "{CLASS} {NAME};",
  "returnType": {
    "type": "simple",
    "value": "var"
  },
  "arduino": {
    "code": "{CLASS} {NAME};"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"invokeClass\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "invokeClassFunction",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-invoke-class-function",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-invoke-class-function-exec"
      },
      {
        "id": "FUNCTION",
        "alias": "dynamicDropdown",
        "options": "voidFunctions"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-class-function-class"
      },
      {
        "id": "CLASS",
        "alias": "dynamicDropdown",
        "options": "objects"
      }
    ]
  ],
  "code": "{CLASS}.{FUNCTION}();",
  "dynamicDropdown": {
    "idDropdown": "FUNCTION",
    "options": "voidFunctions"
  },
  "arduino": {
    "code": "{CLASS}.{FUNCTION}();"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"invokeClassFunction\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "invokeClassReturnFunction",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-invoke-class-return-function",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-invoke-class-return-function-exec"
      },
      {
        "id": "FUNCTION",
        "alias": "dynamicDropdown",
        "options": "returnFunctions"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-class-function-class"
      },
      {
        "id": "CLASS",
        "alias": "dynamicDropdown",
        "options": "objects"
      }
    ]
  ],
  "code": "{CLASS}.{FUNCTION}()",
  "returnType": {
    "type": "fromDynamicDropdown",
    "idDropdown": "FUNCTION",
    "options": "returnFunctions"
  },
  "arduino": {
    "code": "{CLASS}.{FUNCTION}()"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"invokeClassReturnFunction\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "selectClassVariable",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-select-class-variable",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-select-class-variable-variable"
      },
      {
        "id": "VAR",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-class-function-class"
      },
      {
        "id": "CLASS",
        "alias": "dynamicDropdown",
        "options": "objects"
      }
    ]
  ],
  "code": "{CLASS}.{VAR}",
  "returnType": {
    "type": "fromDynamicDropdown",
    "idDropdown": "VAR",
    "options": "softwareVars"
  },
  "arduino": {
    "code": "{CLASS}.{VAR}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"selectClassVariable\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "setClassVariable",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": {
        "type": "fromDynamicDropdown",
        "idDropdown": "NAME",
        "options": "softwareVars"
      },
      "suggestedBloqs": [
        "number",
        "basicOperations",
        "string",
        "stringSum"
      ],
      "name": "331d8c72-c288-4a2e-a09b-c771509f6bd3"
    }
  ],
  "bloqClass": "bloq-set-class-variable",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-set-class-variable-variable"
      },
      {
        "id": "NAME",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-class-function-class"
      },
      {
        "id": "CLASS",
        "alias": "dynamicDropdown",
        "options": "objects"
      },
      {
        "alias": "text",
        "value": "="
      },
      {
        "bloqInputId": "VALUE",
        "alias": "bloqInput",
        "acceptType": {
          "type": "fromDynamicDropdown",
          "idDropdown": "NAME",
          "options": "softwareVars"
        },
        "suggestedBloqs": [
          "number",
          "basicOperations",
          "string",
          "stringSum"
        ],
        "name": "331d8c72-c288-4a2e-a09b-c771509f6bd3"
      }
    ]
  ],
  "code": "{CLASS}.{NAME} = {VALUE};",
  "arduino": {
    "code": "{CLASS}.{NAME} = {VALUE};"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"setClassVariable\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "code",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-code",
  "content": [
    [
      {
        "id": "CODE",
        "alias": "multilineCodeInput",
        "value": "",
        "placeholder": "bloq-code-writeYourCode"
      }
    ]
  ],
  "code": "{CODE}\n",
  "arduino": {
    "code": "{CODE}\n"
  },
  "python": {
    "codeLines": [
      {
        "code": "{CODE}"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "comment",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-comment",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-comment-comment"
      },
      {
        "id": "COMMENT",
        "alias": "multilineCommentInput",
        "placeholder": "bloq-comment-default"
      }
    ]
  ],
  "code": "/*\n{COMMENT}\n*/",
  "arduino": {
    "code": "/*\n{COMMENT}\n*/"
  },
  "python": {
    "codeLines": [
      {
        "code": "\"\"\"{COMMENT}\"\"\""
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "enableInterrupt",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-enable-interrupt",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-enable-interrupt"
      },
      {
        "id": "FUNC",
        "alias": "dynamicDropdown",
        "options": "voidFunctions"
      },
      {
        "alias": "text",
        "value": "bloq-enable-interrupt-pin"
      },
      {
        "id": "PIN",
        "alias": "dynamicDropdown",
        "options": "varComponents"
      },
      {
        "id": "STATE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-enable-interrupt-rising",
            "value": "RISING"
          },
          {
            "label": "bloq-enable-interrupt-falling",
            "value": "FALLING"
          },
          {
            "label": "bloq-enable-interrupt-change",
            "value": "CHANGE"
          }
        ]
      }
    ]
  ],
  "code": "enableInterrupt({PIN}, {FUNC}, {STATE});",
  "arduino": {
    "code": "enableInterrupt({PIN}, {FUNC}, {STATE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"enableInterrupt\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "convert",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "int",
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "6b4237ab-812f-4f9e-9d69-4f58a1eae9f5"
    }
  ],
  "bloqClass": "bloq-convert",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-convert-convert"
      },
      {
        "bloqInputId": "NUMBER",
        "alias": "bloqInput",
        "acceptType": [
          "int",
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "6b4237ab-812f-4f9e-9d69-4f58a1eae9f5"
      },
      {
        "alias": "text",
        "value": "bloq-convert-to"
      },
      {
        "id": "TYPE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-convert-dec",
            "value": "DEC"
          },
          {
            "label": "bloq-convert-hex",
            "value": "HEX"
          },
          {
            "label": "bloq-convert-oct",
            "value": "OCT"
          },
          {
            "label": "bloq-convert-bin",
            "value": "BIN"
          }
        ]
      }
    ]
  ],
  "code": "({NUMBER},{TYPE});",
  "arduino": {
    "code": "({NUMBER},{TYPE})"
  },
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"convert\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "serialSend",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "name": "1854c939-518f-412b-97d0-a78537dafbc2"
    }
  ],
  "bloqClass": "bloq-serial-send",
  "content": [
    [
      {
        "id": "SERIAL",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      },
      {
        "alias": "text",
        "value": "bloq-serial-send-send"
      },
      {
        "bloqInputId": "DATA",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "name": "1854c939-518f-412b-97d0-a78537dafbc2"
      },
      {
        "id": "FUNCTION",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-serial-send-println",
            "value": "println"
          },
          {
            "label": "bloq-serial-send-print",
            "value": "print"
          }
        ]
      }
    ]
  ],
  "code": "{SERIAL}.{FUNCTION}({DATA});",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "code": "{SERIAL}.{FUNCTION}({DATA});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"serialSend\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "serialReceive",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-serial-receiver",
  "content": [
    [
      {
        "id": "SERIAL",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      },
      {
        "alias": "text",
        "value": "bloq-serial-receiver-receive"
      }
    ]
  ],
  "code": "{SERIAL}.readString()",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "setupExtraCode": "{SERIAL}.begin(º[{SERIAL}.baudRate]);",
    "needInstanceOf": [
      {
        "name": "{SERIAL}",
        "type": "bqSoftwareSerial",
        "arguments": [
          "º[{SERIAL}.pin.rx]",
          "º[{SERIAL}.pin.tx]",
          "º[{SERIAL}.baudRate]"
        ]
      }
    ],
    "code": "{SERIAL}.readString()"
  },
  "returnType": {
    "type": "simple",
    "value": "String"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"serialReceive\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "serialReceiveInt",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-serial-receive-number",
  "content": [
    [
      {
        "id": "SERIAL",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      },
      {
        "alias": "text",
        "value": "bloq-serial-receiver-receive-number"
      }
    ]
  ],
  "code": "{SERIAL}.readInt()",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "setupExtraCode": "{SERIAL}.begin(º[{SERIAL}.baudRate]);",
    "needInstanceOf": [
      {
        "name": "{SERIAL}",
        "type": "bqSoftwareSerial",
        "arguments": [
          "º[{SERIAL}.pin.rx]",
          "º[{SERIAL}.pin.tx]",
          "º[{SERIAL}.baudRate]"
        ]
      }
    ],
    "code": "{SERIAL}.readInt()"
  },
  "returnType": {
    "type": "simple",
    "value": "int"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"serialReceiveInt\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "serialSend-v1",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "string",
        "number",
        "selectVariable"
      ],
      "name": "9ba44779-eb15-4d32-b1a2-1cc22727fab8"
    }
  ],
  "bloqClass": "bloq-serial-send",
  "content": [
    [
      {
        "id": "SERIAL",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      },
      {
        "alias": "text",
        "value": "bloq-serial-send-send"
      },
      {
        "bloqInputId": "DATA",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "number",
          "selectVariable"
        ],
        "name": "9ba44779-eb15-4d32-b1a2-1cc22727fab8"
      },
      {
        "id": "LN",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-serial-send-println",
            "value": "println"
          },
          {
            "label": "bloq-serial-send-print",
            "value": "print"
          }
        ]
      }
    ]
  ],
  "code": "{SERIAL}.{LN}({DATA});",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "setupExtraCode": "{SERIAL}.begin(º[{SERIAL}.baudRate]);",
    "needInstanceOf": [
      {
        "name": "{SERIAL}",
        "type": "bqSoftwareSerial",
        "arguments": [
          "º[{SERIAL}.pin.rx]",
          "º[{SERIAL}.pin.tx]",
          "º[{SERIAL}.baudRate]"
        ]
      }
    ],
    "code": "{SERIAL}.{LN}({DATA});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"serialSend-v1\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "viewer",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-viewer",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-viewer"
      }
    ]
  ],
  "code": "/*sendViewerData*/",
  "arduino": {
    "code": "/*sendViewerData*/"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"viewer\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "PTSensor",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-PTsensor",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-PTsensor"
      },
      {
        "id": "FUNCTION",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-PTsensor-pressure",
            "value": "getPressure()"
          },
          {
            "label": "bloq-PTsensor-temperature",
            "value": "getTemperature()"
          },
          {
            "label": "bloq-PTsensor-altitude",
            "value": "getAltitude()"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-PTsensor-sensor"
      },
      {
        "id": "PTSENS",
        "alias": "dynamicDropdown",
        "options": "barometer"
      }
    ]
  ],
  "code": "{PTSENS}.{FUNCTION}",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "code": "{PTSENS}.{FUNCTION}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"PTSensor\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "rgbLed",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-rgbLed",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-rgbLed"
      },
      {
        "id": "LED",
        "alias": "dynamicDropdown",
        "options": "rgbs"
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-red"
      },
      {
        "id": "RED",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-green"
      },
      {
        "id": "GREEN",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-blue"
      },
      {
        "id": "BLUE",
        "alias": "numberInput",
        "value": 0
      }
    ]
  ],
  "code": "{LED}.setRGBcolor({RED},{GREEN},{BLUE});",
  "arduino": {
    "code": "{LED}.setRGBcolor({RED},{GREEN},{BLUE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"rgbLed\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "rgbLedFade",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-rgbLed-fade",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-rgbLed-fade"
      },
      {
        "id": "LED",
        "alias": "dynamicDropdown",
        "options": "rgbs"
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-fade-red"
      },
      {
        "id": "RED",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-fade-green"
      },
      {
        "id": "GREEN",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-fade-blue"
      },
      {
        "id": "BLUE",
        "alias": "numberInput",
        "value": 0
      }
    ]
  ],
  "code": "{LED}.crossFade({RED},{GREEN},{BLUE});",
  "arduino": {
    "code": "{LED}.crossFade({RED},{GREEN},{BLUE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"rgbLedFade\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "rgbLedOff",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-rgbLed-off",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-rgbLed-off"
      },
      {
        "id": "LED",
        "alias": "dynamicDropdown",
        "options": "rgbs"
      }
    ]
  ],
  "code": "{LED}.setRGBcolor(0,0,0);",
  "arduino": {
    "code": "{LED}.setRGBcolor(0,0,0);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"rgbLedOff\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "rgbLedSimple",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-rgbLed-simple",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-rgbLed-simple"
      },
      {
        "id": "LED",
        "alias": "dynamicDropdown",
        "options": "rgbs"
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-simple-color"
      },
      {
        "id": "COLOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-rgbLed-simple-white",
            "value": "255,255,255"
          },
          {
            "label": "bloq-rgbLed-simple-yellow",
            "value": "255,255,0"
          },
          {
            "label": "bloq-rgbLed-simple-orange",
            "value": "200,50,0"
          },
          {
            "label": "bloq-rgbLed-simple-red",
            "value": "255,0,0"
          },
          {
            "label": "bloq-rgbLed-simple-green",
            "value": "0,255,0"
          },
          {
            "label": "bloq-rgbLed-simple-dark-green",
            "value": "0,60,102"
          },
          {
            "label": "bloq-rgbLed-simple-blue",
            "value": "40,40,255"
          },
          {
            "label": "bloq-rgbLed-simple-dark-blue",
            "value": "0,0,255"
          },
          {
            "label": "bloq-rgbLed-simple-pink",
            "value": "255,0,255"
          }
        ]
      }
    ]
  ],
  "code": "{LED}.setRGBcolor({COLOR});",
  "arduino": {
    "code": "{LED}.setRGBcolor({COLOR});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"rgbLedSimple\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "PTSensorCalibration",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-PTsensor-calibration",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-PTsensor-calibration"
      },
      {
        "id": "VALUE",
        "alias": "numberInput",
        "value": 101325
      },
      {
        "alias": "text",
        "value": "bloq-PTsensor-calibration-sensor"
      },
      {
        "id": "PTSENS",
        "alias": "dynamicDropdown",
        "options": "barometer"
      }
    ]
  ],
  "code": "{PTSENS}.setSealevelPressure({VALUE});",
  "arduino": {
    "code": "{PTSENS}.setSealevelPressure({VALUE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"PTSensorCalibration\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "rgbLedAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "0dc80e19-2283-4e1a-b9e4-be0332ea6693"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "1cce5423-73d9-44b9-a86b-c300072b22b2"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "6d9df1c6-b4de-4ded-80b9-2e347afe4ba9"
    }
  ],
  "bloqClass": "bloq-rgbLed-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-rgbLed"
      },
      {
        "id": "LED",
        "alias": "dynamicDropdown",
        "options": "rgbs"
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-red"
      },
      {
        "bloqInputId": "RED",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "0dc80e19-2283-4e1a-b9e4-be0332ea6693"
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-green"
      },
      {
        "bloqInputId": "GREEN",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "1cce5423-73d9-44b9-a86b-c300072b22b2"
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-blue"
      },
      {
        "bloqInputId": "BLUE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "6d9df1c6-b4de-4ded-80b9-2e347afe4ba9"
      }
    ]
  ],
  "code": "{LED}.setRGBcolor({RED},{GREEN},{BLUE});",
  "arduino": {
    "code": "{LED}.setRGBcolor({RED},{GREEN},{BLUE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"rgbLedAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "analogReadAdvanced",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "string",
        "selectVariable"
      ],
      "name": "0f88a383-9aee-4549-89fe-25fec1b1fd7e"
    }
  ],
  "bloqClass": "bloq-analog-read-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-analog-read-advanced-readpin"
      },
      {
        "bloqInputId": "PIN",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "selectVariable"
        ],
        "name": "0f88a383-9aee-4549-89fe-25fec1b1fd7e"
      }
    ]
  ],
  "code": "'{PIN}'.indexOf('A') !== -1 ? 'analogRead({PIN})'.replace(/\"/g, '') : 'analogRead({PIN})'",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "code": "analogRead(¬{PIN.formatPin})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"analogReadAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "analogWrite",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "3481519d-ab9a-4be7-a463-b1cb9dcf14fc"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "pinLevels",
        "number",
        "selectVariable"
      ],
      "name": "a9e109f4-7830-4425-90e0-f5d9fdd18dec"
    }
  ],
  "bloqClass": "bloq-pin-writte-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-pin-analog-write-V1"
      },
      {
        "bloqInputId": "PIN",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "3481519d-ab9a-4be7-a463-b1cb9dcf14fc"
      },
      {
        "alias": "text",
        "value": "bloq-pin-analog-write-data-V1"
      },
      {
        "bloqInputId": "DATA",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "pinLevels",
          "number",
          "selectVariable"
        ],
        "name": "a9e109f4-7830-4425-90e0-f5d9fdd18dec"
      }
    ]
  ],
  "code": "'{PIN}'.indexOf('A') !== -1 ? 'analogWrite({PIN},{DATA});'.replace(/\"/g, '') : 'analogWrite({PIN},{DATA});'",
  "arduino": {
    "code": "analogWrite(¬{PIN.formatPin}, {DATA});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"analogWrite\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "buzzerAdvanced-v2",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "0df41ea8-41ab-4598-a858-754a293716d1"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "1e358fa9-2c56-46f3-b5cd-67c2aef62a43"
    }
  ],
  "bloqClass": "bloq-buzzer-advance",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-sound"
      },
      {
        "id": "BUZZER",
        "alias": "dynamicDropdown",
        "options": "buzzers"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-note"
      },
      {
        "bloqInputId": "NOTE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "0df41ea8-41ab-4598-a858-754a293716d1"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-for"
      },
      {
        "bloqInputId": "SECONDS",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "1e358fa9-2c56-46f3-b5cd-67c2aef62a43"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-ms"
      }
    ]
  ],
  "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});",
  "arduino": {
    "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"buzzerAdvanced-v2\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "buzzerWithoutPause",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-buzzer",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-buzzer-sound"
      },
      {
        "id": "BUZZER",
        "alias": "dynamicDropdown",
        "options": "buzzers"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-note"
      },
      {
        "id": "NOTE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-buzzer-do",
            "value": "261"
          },
          {
            "label": "bloq-buzzer-re",
            "value": "293"
          },
          {
            "label": "bloq-buzzer-mi",
            "value": "329"
          },
          {
            "label": "bloq-buzzer-fa",
            "value": "349"
          },
          {
            "label": "bloq-buzzer-sol",
            "value": "392"
          },
          {
            "label": "bloq-buzzer-la",
            "value": "440"
          },
          {
            "label": "bloq-buzzer-si",
            "value": "494"
          },
          {
            "label": "bloq-buzzer-do-#",
            "value": "277"
          },
          {
            "label": "bloq-buzzer-re-#",
            "value": "311"
          },
          {
            "label": "bloq-buzzer-fa-#",
            "value": "370"
          },
          {
            "label": "bloq-buzzer-sol-#",
            "value": "415"
          },
          {
            "label": "bloq-buzzer-la-#",
            "value": "466"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-for"
      },
      {
        "id": "SECONDS",
        "alias": "numberInput",
        "value": 2000
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-ms"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-without-pause"
      }
    ]
  ],
  "code": "tone({BUZZER},{NOTE},{SECONDS});",
  "arduino": {
    "needInstanceOf": [
      {
        "name": "{BUZZER}",
        "type": "const int",
        "equals": "º[{BUZZER}.pin.s]"
      }
    ],
    "code": "tone({BUZZER},{NOTE},{SECONDS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"buzzerWithoutPause\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "buzzerWithoutPauseAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "5d62eef0-2306-49ce-be7c-06536dd3ed5d"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "a1643ae0-7c0f-47ef-b4f3-c0be4c2adffc"
    }
  ],
  "bloqClass": "bloq-buzzer-advance",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-sound"
      },
      {
        "id": "BUZZER",
        "alias": "dynamicDropdown",
        "options": "buzzers"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-note"
      },
      {
        "bloqInputId": "NOTE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "5d62eef0-2306-49ce-be7c-06536dd3ed5d"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-for"
      },
      {
        "bloqInputId": "SECONDS",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "a1643ae0-7c0f-47ef-b4f3-c0be4c2adffc"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-ms"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-without-pause"
      }
    ]
  ],
  "code": "tone({BUZZER},{NOTE},{SECONDS});",
  "arduino": {
    "code": "tone({BUZZER},{NOTE},{SECONDS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"buzzerWithoutPauseAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "continuousServoStartAdvanced-v1",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "hwVariable",
        "selectVariable"
      ],
      "name": "0475fb42-eb37-4856-a148-9ff91c60a89b"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "9ba5bf23-7527-4f64-b82f-20fea7374285"
    }
  ],
  "bloqClass": "bloq-continuous-servo-start-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-continuous-servo-start-advanced-turn"
      },
      {
        "bloqInputId": "SERVO",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "0475fb42-eb37-4856-a148-9ff91c60a89b"
      },
      {
        "alias": "text",
        "value": "bloq-continuous-servo-start-advanced-direction"
      },
      {
        "bloqInputId": "DIRECTION",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "9ba5bf23-7527-4f64-b82f-20fea7374285"
      }
    ]
  ],
  "code": "{SERVO}.write({DIRECTION});",
  "arduino": {
    "code": "{SERVO}.write({DIRECTION});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"continuousServoStartAdvanced-v1\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "continuousServoStopAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "hwVariable",
        "selectVariable"
      ],
      "name": "b67280cd-96d8-4f38-ae7f-6ebbf401847e"
    }
  ],
  "bloqClass": "bloq-continuous-servo-stop-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-continuous-servo-stop-advanced-stop"
      },
      {
        "bloqInputId": "SERVO",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "b67280cd-96d8-4f38-ae7f-6ebbf401847e"
      }
    ]
  ],
  "code": "{SERVO}.write(90);",
  "arduino": {
    "code": "{SERVO}.write(90);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"continuousServoStopAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "digitalReadAdvanced",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "58fa9ba4-e6a3-4f7d-841f-4fe9459932da"
    }
  ],
  "bloqClass": "bloq-digital-read-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-digital-read-advanced-readpin"
      },
      {
        "bloqInputId": "PIN",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "58fa9ba4-e6a3-4f7d-841f-4fe9459932da"
      }
    ]
  ],
  "code": "digitalRead({PIN})",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "code": "digitalRead({PIN})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"digitalReadAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "digitalWrite",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "515d4668-acc9-4c87-813f-dd2b0eb2e18a"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "pinLevels",
        "number",
        "selectVariable"
      ],
      "name": "bf55c330-0714-4ab9-8230-94741ab82f00"
    }
  ],
  "bloqClass": "bloq-pin-writte-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-pin-digital-write"
      },
      {
        "bloqInputId": "PIN",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "515d4668-acc9-4c87-813f-dd2b0eb2e18a"
      },
      {
        "alias": "text",
        "value": "bloq-pin-digital-write-data-V1"
      },
      {
        "bloqInputId": "DATA",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "pinLevels",
          "number",
          "selectVariable"
        ],
        "name": "bf55c330-0714-4ab9-8230-94741ab82f00"
      }
    ]
  ],
  "code": "digitalWrite({PIN},{DATA});",
  "arduino": {
    "code": "digitalWrite({PIN},{DATA});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"digitalWrite\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "lcdTurnOnOffAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "hwVariable",
        "selectVariable"
      ],
      "name": "35039680-5e71-41d0-a6bd-d6984b27d23a"
    }
  ],
  "bloqClass": "bloq-lcd-turn-on-off-advanced",
  "content": [
    [
      {
        "id": "STATE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-lcd-turn-on-off-advanced-turnon",
            "value": "HIGH"
          },
          {
            "label": "bloq-lcd-turn-on-off-advanced-turnoff",
            "value": "LOW"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-lcd-turn-on-off-advanced-lcdLigth"
      },
      {
        "bloqInputId": "LCD",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "35039680-5e71-41d0-a6bd-d6984b27d23a"
      }
    ]
  ],
  "code": "{LCD}.setBacklight({STATE});",
  "arduino": {
    "code": "{LCD}.setBacklight({STATE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"lcdTurnOnOffAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "lcdWriteAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "string",
        "selectVariable"
      ],
      "name": "7fe8b25d-1659-469e-82ce-81d0abe6c266"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "hwVariable",
        "selectVariable"
      ],
      "name": "c33e0455-4889-45a8-9784-d594d7fcbe29"
    }
  ],
  "bloqClass": "bloq-lcd-writte-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-lcd-writte-advanced-write"
      },
      {
        "bloqInputId": "TEXT",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "selectVariable"
        ],
        "name": "7fe8b25d-1659-469e-82ce-81d0abe6c266"
      },
      {
        "alias": "text",
        "value": "bloq-lcd-writte-advanced-inLCD"
      },
      {
        "bloqInputId": "LCD",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "c33e0455-4889-45a8-9784-d594d7fcbe29"
      }
    ]
  ],
  "code": "{LCD}.print({TEXT});",
  "arduino": {
    "code": "{LCD}.print({TEXT});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"lcdWriteAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "lcdWritePositionAdvanced-v1",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "string",
        "selectVariable"
      ],
      "name": "09a266ab-1722-4c44-af40-3175d8aac11e"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "hwVariable",
        "selectVariable"
      ],
      "name": "f59603ea-606e-49e3-b1df-67932cac817f"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "083f8393-97d4-471b-abd1-ba814009f051"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "195dff37-0bfb-45ae-be36-b355943901c1"
    }
  ],
  "bloqClass": "bloq-lcd-writte",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-lcd-writte-write"
      },
      {
        "bloqInputId": "TEXT",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "selectVariable"
        ],
        "name": "09a266ab-1722-4c44-af40-3175d8aac11e"
      },
      {
        "alias": "text",
        "value": "bloq-lcd-writte-inLCD"
      },
      {
        "bloqInputId": "LCD",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "f59603ea-606e-49e3-b1df-67932cac817f"
      },
      {
        "alias": "text",
        "value": "bloq-lcd-writte-advanced-inPosition"
      },
      {
        "bloqInputId": "COLUMN",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "083f8393-97d4-471b-abd1-ba814009f051"
      },
      {
        "bloqInputId": "ROW",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "195dff37-0bfb-45ae-be36-b355943901c1"
      }
    ]
  ],
  "code": "{LCD}.setCursor({COLUMN},{ROW});{LCD}.print({TEXT});",
  "arduino": {
    "code": "{LCD}.setCursor({COLUMN},{ROW});{LCD}.print({TEXT});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"lcdWritePositionAdvanced-v1\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "ledAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "hwVariable",
        "selectVariable"
      ],
      "name": "fc8c3f6a-559f-45a2-936b-2be0530cb2de"
    }
  ],
  "bloqClass": "bloq-led-advanced",
  "content": [
    [
      {
        "id": "STATE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-led-advanced-turnon",
            "value": "HIGH"
          },
          {
            "label": "bloq-led-advanced-turnoff",
            "value": "LOW"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-led-advanced-theLED"
      },
      {
        "bloqInputId": "LED",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "fc8c3f6a-559f-45a2-936b-2be0530cb2de"
      }
    ]
  ],
  "code": "digitalWrite({LED},{STATE});",
  "arduino": {
    "code": "digitalWrite({LED},{STATE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"ledAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "oscillatorAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "hwVariable",
        "selectVariable"
      ],
      "name": "e45e129f-87ae-4227-aa8a-70ee974b7f7d"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "d3a5b420-4df8-4700-992f-9205b0c03817"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "71ab7558-eeb0-4116-bc6d-44c0948e8110"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "1993a34f-9656-4ce8-b13c-b62b8c07076e"
    }
  ],
  "bloqClass": "bloq-oscillator-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-oscillator-advanced-oscillate"
      },
      {
        "bloqInputId": "OSCILLATOR",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "e45e129f-87ae-4227-aa8a-70ee974b7f7d"
      },
      {
        "alias": "text",
        "value": "bloq-oscillator-advanced-around"
      },
      {
        "bloqInputId": "PHASE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "d3a5b420-4df8-4700-992f-9205b0c03817"
      },
      {
        "alias": "text",
        "value": "bloq-oscillator-advanced-amplitude"
      },
      {
        "bloqInputId": "AMPLITUDE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "71ab7558-eeb0-4116-bc6d-44c0948e8110"
      },
      {
        "alias": "text",
        "value": "bloq-common-every"
      },
      {
        "bloqInputId": "SPEED",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "1993a34f-9656-4ce8-b13c-b62b8c07076e"
      },
      {
        "alias": "text",
        "value": "bloq-common-ms"
      }
    ]
  ],
  "code": "{OSCILLATOR}.SetO({PHASE});\n{OSCILLATOR}.SetA({AMPLITUDE});\n{OSCILLATOR}.SetT({SPEED});\n{OSCILLATOR}.refresh();",
  "arduino": {
    "code": "{OSCILLATOR}.SetO({PHASE});\n{OSCILLATOR}.SetA({AMPLITUDE});\n{OSCILLATOR}.SetT({SPEED});\n{OSCILLATOR}.refresh();"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"oscillatorAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "oscillatorStartAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "hwVariable",
        "selectVariable"
      ],
      "name": "51cfe9c7-2bad-4ffa-b934-3cb9c0e15cf3"
    }
  ],
  "bloqClass": "bloq-oscillator-start-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-oscillator-start-advanced-oscillator"
      },
      {
        "bloqInputId": "OSCILLATOR",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "51cfe9c7-2bad-4ffa-b934-3cb9c0e15cf3"
      }
    ]
  ],
  "code": "{OSCILLATOR}.start()",
  "arduino": {
    "code": "{OSCILLATOR}.start()"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"oscillatorStartAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "oscillatorStopAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "hwVariable",
        "selectVariable"
      ],
      "name": "a190d48a-0852-4743-9328-7ab8fdd72836"
    }
  ],
  "bloqClass": "bloq-oscillator-stop-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-oscillator-stop-advanced-stop"
      },
      {
        "bloqInputId": "OSCILLATOR",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "a190d48a-0852-4743-9328-7ab8fdd72836"
      }
    ]
  ],
  "code": "{OSCILLATOR}.stop()",
  "arduino": {
    "code": "{OSCILLATOR}.stop()"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"oscillatorStopAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "pinLevels",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-pinlevels",
  "content": [
    [
      {
        "id": "STATE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-pinlevel-high",
            "value": "HIGH"
          },
          {
            "label": "bloq-pinlevel-low",
            "value": "LOW"
          }
        ]
      }
    ]
  ],
  "code": "{STATE}",
  "returnType": {
    "type": "simple",
    "value": "bool"
  },
  "arduino": {
    "code": "{STATE}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"pinLevels\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "servoNormalAdvanced-v2",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "c977802d-4749-4417-ae1c-5254db1c2b01"
    }
  ],
  "bloqClass": "bloq-servo-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-servo-advanced-move"
      },
      {
        "id": "SERVO",
        "alias": "dynamicDropdown",
        "options": "servos"
      },
      {
        "alias": "text",
        "value": "bloq-servo-advanced-to"
      },
      {
        "bloqInputId": "POSITION",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "c977802d-4749-4417-ae1c-5254db1c2b01"
      },
      {
        "alias": "text",
        "value": "bloq-servo-advanced-degrees"
      }
    ]
  ],
  "code": "{SERVO}.write({POSITION});",
  "arduino": {
    "code": "{SERVO}.write({POSITION});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"servoNormalAdvanced-v2\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "servoAttach",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-servo-attach",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-servo-attach"
      },
      {
        "id": "SERVO",
        "alias": "dynamicDropdown",
        "options": "allServos"
      }
    ]
  ],
  "code": "{SERVO}.attach({SERVO.pin});",
  "arduino": {
    "code": "{SERVO}.attach(º[{SERVO}.pin.s]);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"servoAttach\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "servoDetach",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-servo-detach",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-servo-detach"
      },
      {
        "id": "SERVO",
        "alias": "dynamicDropdown",
        "options": "allServos"
      }
    ]
  ],
  "code": "{SERVO}.detach();",
  "arduino": {
    "code": "{SERVO}.detach();"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"servoDetach\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "stopBuzzer",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-buzzer",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-stop-buzzer"
      },
      {
        "id": "BUZZER",
        "alias": "dynamicDropdown",
        "options": "buzzers"
      }
    ]
  ],
  "code": "noTone({BUZZER});",
  "arduino": {
    "needInstanceOf": [
      {
        "name": "{BUZZER}",
        "type": "const int",
        "equals": "º[{BUZZER}.pin.s]"
      }
    ],
    "code": "noTone({BUZZER});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"stopBuzzer\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "buzzer",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-buzzer",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-buzzer-sound"
      },
      {
        "id": "BUZZER",
        "alias": "dynamicDropdown",
        "options": "buzzers"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-note"
      },
      {
        "id": "NOTE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-buzzer-do",
            "value": "261"
          },
          {
            "label": "bloq-buzzer-re",
            "value": "293"
          },
          {
            "label": "bloq-buzzer-mi",
            "value": "329"
          },
          {
            "label": "bloq-buzzer-fa",
            "value": "349"
          },
          {
            "label": "bloq-buzzer-sol",
            "value": "392"
          },
          {
            "label": "bloq-buzzer-la",
            "value": "440"
          },
          {
            "label": "bloq-buzzer-si",
            "value": "494"
          },
          {
            "label": "bloq-buzzer-do-#",
            "value": "277"
          },
          {
            "label": "bloq-buzzer-re-#",
            "value": "311"
          },
          {
            "label": "bloq-buzzer-fa-#",
            "value": "370"
          },
          {
            "label": "bloq-buzzer-sol-#",
            "value": "415"
          },
          {
            "label": "bloq-buzzer-la-#",
            "value": "466"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-for"
      },
      {
        "id": "SECONDS",
        "alias": "numberInput",
        "value": 2000
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-ms"
      }
    ]
  ],
  "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});",
  "arduino": {
    "needInstanceOf": [
      {
        "name": "{BUZZER}",
        "type": "const int",
        "equals": "º[{BUZZER}.pin.s]"
      }
    ],
    "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"buzzer\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "continuousServoStart",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-continuous-servo-start",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-continuous-servo-start-turn"
      },
      {
        "id": "SERVO",
        "alias": "dynamicDropdown",
        "options": "continuousServos"
      },
      {
        "alias": "text",
        "value": "bloq-continuous-servo-start-direction"
      },
      {
        "id": "DIRECTION",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-continuous-servo-start-clockwise",
            "value": "180"
          },
          {
            "label": "bloq-continuous-servo-start-counterclockwise",
            "value": "0"
          }
        ]
      }
    ]
  ],
  "code": "{SERVO}.write({DIRECTION});",
  "arduino": {
    "includes": [
      "Servo.h"
    ],
    "needInstanceOf": [
      {
        "name": "{SERVO}",
        "type": "Servo"
      }
    ],
    "setupExtraCode": "{SERVO}.attach(º[{SERVO}.pin.s]);",
    "code": "{SERVO}.write({DIRECTION});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"continuousServoStart\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "continuousServoStop",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-continuous-servo-stop",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-continuous-servo-stop-stop"
      },
      {
        "id": "SERVO",
        "alias": "dynamicDropdown",
        "options": "continuousServos"
      }
    ]
  ],
  "code": "{SERVO}.write(90);",
  "arduino": {
    "includes": [
      "Servo.h"
    ],
    "needInstanceOf": [
      {
        "name": "{SERVO}",
        "type": "Servo"
      }
    ],
    "setupExtraCode": "{SERVO}.attach(º[{SERVO}.pin.s]);",
    "code": "{SERVO}.write(90);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"continuousServoStop\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "buzzerAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "hwVariable",
        "selectVariable"
      ],
      "name": "26b0c580-d5ad-4a1e-858a-5f71d75a41a6"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "6453c49d-a9e2-4380-9b95-66ad042a7a06"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "8f7fba62-3d89-465f-bf8a-e4f1b86533b4"
    }
  ],
  "bloqClass": "bloq-buzzer-advance",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-sound"
      },
      {
        "bloqInputId": "BUZZER",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "26b0c580-d5ad-4a1e-858a-5f71d75a41a6"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-note"
      },
      {
        "bloqInputId": "NOTE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "6453c49d-a9e2-4380-9b95-66ad042a7a06"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-for"
      },
      {
        "bloqInputId": "SECONDS",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "8f7fba62-3d89-465f-bf8a-e4f1b86533b4"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-ms"
      }
    ]
  ],
  "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});",
  "arduino": {
    "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"buzzerAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "continuousServoStartAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-continuous-servo-start-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-continuous-servo-start-advanced-turn"
      },
      {
        "continuousServoStartAdvancedInputId": "SERVO",
        "alias": "continuousServoStartAdvancedInput",
        "acceptType": [
          "all"
        ]
      },
      {
        "alias": "text",
        "value": "bloq-continuous-servo-start-advanced-direction"
      },
      {
        "id": "DIRECTION",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-continuous-servo-start-advanced-clockwise",
            "value": "0"
          },
          {
            "label": "bloq-continuous-servo-start-advanced-counterclockwise",
            "value": "180"
          }
        ]
      }
    ]
  ],
  "code": "{SERVO}.write({DIRECTION});",
  "arduino": {
    "includes": [
      "Servo.h"
    ],
    "needInstanceOf": [
      {
        "name": "{SERVO}",
        "type": "Servo"
      }
    ],
    "setupExtraCode": "{SERVO}.attach(º[{SERVO}.pin.s]);",
    "code": "{SERVO}.write({DIRECTION});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"continuousServoStartAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "lcdWritePositionAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "name": "e0d022b5-fbf8-4ad0-b592-57bf69df5f0e"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "name": "73cf66a3-79c9-481a-ae52-12cb55b37572"
    }
  ],
  "bloqClass": "bloq-lcd-writte deprecated",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-lcd-writte-write"
      },
      {
        "bloqInputId": "TEXT",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "name": "e0d022b5-fbf8-4ad0-b592-57bf69df5f0e"
      },
      {
        "alias": "text",
        "value": "bloq-lcd-writte-inLCD"
      },
      {
        "bloqInputId": "LCD",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "name": "73cf66a3-79c9-481a-ae52-12cb55b37572"
      },
      {
        "alias": "text",
        "value": "bloq-lcd-writte-advanced-inPosition"
      },
      {
        "id": "COLUMN",
        "alias": "numberInput",
        "value": 0
      },
      {
        "id": "ROW",
        "alias": "numberInput",
        "value": 0
      }
    ]
  ],
  "code": "{LCD}.setCursor({COLUMN},{ROW});{LCD}.print({TEXT});",
  "arduino": {
    "code": "{LCD}.setCursor({COLUMN},{ROW});{LCD}.print({TEXT});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"lcdWritePositionAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "pinReadAdvanced",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "name": "65ddac96-96eb-4ec4-bcce-19e9f9142692"
    }
  ],
  "bloqClass": "bloq-pin-read-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-pin-read-advanced-readpin"
      },
      {
        "bloqInputId": "PIN",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "name": "65ddac96-96eb-4ec4-bcce-19e9f9142692"
      }
    ]
  ],
  "code": "'{PIN}'.indexOf('A') !== -1 ? 'analogRead({PIN})' : 'digitalRead({PIN})'",
  "returnType": {
    "type": "simple",
    "value": "bool"
  },
  "arduino": {
    "code": "¬{PIN.readPin}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"pinReadAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "pinWriteAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "name": "a89c4e43-dc18-487d-9893-cb4a40294b13"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "name": "69df569a-bdb7-4bdb-ac89-a7cf1d924444"
    }
  ],
  "bloqClass": "bloq-pin-writte-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-pin-writte-advanced-writepin"
      },
      {
        "bloqInputId": "PIN",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "name": "a89c4e43-dc18-487d-9893-cb4a40294b13"
      },
      {
        "alias": "text",
        "value": "bloq-pin-writte-advanced-data"
      },
      {
        "bloqInputId": "DATA",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "name": "69df569a-bdb7-4bdb-ac89-a7cf1d924444"
      }
    ]
  ],
  "code": "'{PIN}'.indexOf('A') === 0 ? 'analogWrite({PIN},{DATA});' : 'digitalWrite({PIN},{DATA});'",
  "arduino": {
    "code": "digitalWrite({PIN},{DATA});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"pinWriteAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "readSensorAdvanced",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "name": "74e9b2d0-cb1f-4398-860e-fc95e08431aa"
    }
  ],
  "bloqClass": "bloq-read-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-read-advanced-read"
      },
      {
        "bloqInputId": "PIN",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "name": "74e9b2d0-cb1f-4398-860e-fc95e08431aa"
      }
    ]
  ],
  "code": "{SENSOR.type}",
  "returnType": {
    "type": "fromDynamicDropdown",
    "idDropdown": "SENSOR",
    "options": "sensors"
  },
  "arduino": {
    "code": "¬{PIN.readSensor}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"readSensorAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "clockRTC",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-rtc",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-rtc"
      },
      {
        "id": "RTC_FUNC",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-rtc-date",
            "value": "getDate"
          },
          {
            "label": "bloq-rtc-time",
            "value": "getTime"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-rtc-using"
      },
      {
        "id": "RTC",
        "alias": "dynamicDropdown",
        "options": "clocks"
      }
    ]
  ],
  "code": "{RTC}.{RTC_FUNC}()",
  "returnType": {
    "type": "simple",
    "value": "String"
  },
  "arduino": {
    "code": "{RTC}.{RTC_FUNC}()"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"clockRTC\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "servoNormalAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "hwVariable",
        "selectVariable"
      ],
      "name": "c422220c-67a1-4a8b-a17c-643ae5585c49"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "b554c869-8e18-4edd-8ca9-b3ab47971daf"
    }
  ],
  "bloqClass": "bloq-servo-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-servo-advanced-move"
      },
      {
        "bloqInputId": "SERVO",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "c422220c-67a1-4a8b-a17c-643ae5585c49"
      },
      {
        "alias": "text",
        "value": "bloq-servo-advanced-to"
      },
      {
        "bloqInputId": "POSITION",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "b554c869-8e18-4edd-8ca9-b3ab47971daf"
      },
      {
        "alias": "text",
        "value": "bloq-servo-advanced-degrees"
      }
    ]
  ],
  "code": "{SERVO}.write({POSITION});",
  "arduino": {
    "code": "{SERVO}.write({POSITION});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"servoNormalAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "hts221Humidity",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-hts221-humidity",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-hts221-humidity"
      },
      {
        "id": "SENSOR",
        "alias": "dynamicDropdown",
        "options": "hts221"
      }
    ]
  ],
  "code": "{SENSOR}.getHumidity()",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "includes": [
      "Wire.h",
      "BitbloqHTS221.h",
      "HTS221_Registers.h"
    ],
    "needInstanceOf": [
      {
        "name": "{SENSOR}",
        "type": "HTS221"
      }
    ],
    "setupExtraCode": "Wire.begin();\n{SENSOR}.begin();",
    "code": "{SENSOR}.getHumidity()"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"hts221Humidity\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "hts221Temperature",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-hts221-temperature",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-hts221-temperature"
      },
      {
        "id": "SENSOR",
        "alias": "dynamicDropdown",
        "options": "hts221"
      }
    ]
  ],
  "code": "{SENSOR}.getTemperature()",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "includes": [
      "Wire.h",
      "BitbloqHTS221.h",
      "HTS221_Registers.h"
    ],
    "needInstanceOf": [
      {
        "name": "{SENSOR}",
        "type": "HTS221"
      }
    ],
    "setupExtraCode": "Wire.begin();\n{SENSOR}.begin();",
    "code": "{SENSOR}.getTemperature()"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"hts221Temperature\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "lcdClear",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-lcd-clear",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-lcd-clear"
      },
      {
        "id": "LCD",
        "alias": "dynamicDropdown",
        "options": "lcds"
      }
    ]
  ],
  "code": "{LCD}.clear();",
  "arduino": {
    "includes": [
      "Wire.h",
      "BitbloqLiquidCrystal.h"
    ],
    "needInstanceOf": [
      {
        "name": "{LCD}",
        "type": "LiquidCrystal",
        "arguments": [
          0
        ]
      }
    ],
    "setupExtraCode": "{LCD}.begin(16, 2);{LCD}.clear();",
    "code": "{LCD}.clear();"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"lcdClear\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "lcdTurnOnOff",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-lcd-turn-on-off",
  "content": [
    [
      {
        "id": "STATE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-lcd-turn-on-off-turnon",
            "value": "HIGH"
          },
          {
            "label": "bloq-lcd-turn-on-off-turnoff",
            "value": "LOW"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-lcd-turn-on-off-lcdLigth"
      },
      {
        "id": "LCD",
        "alias": "dynamicDropdown",
        "options": "lcds"
      }
    ]
  ],
  "code": "{LCD}.setBacklight({STATE});",
  "arduino": {
    "includes": [
      "Wire.h",
      "BitbloqLiquidCrystal.h"
    ],
    "needInstanceOf": [
      {
        "name": "{LCD}",
        "type": "LiquidCrystal",
        "arguments": [
          0
        ]
      }
    ],
    "setupExtraCode": "{LCD}.begin(16, 2);{LCD}.clear();",
    "code": "{LCD}.setBacklight({STATE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"lcdTurnOnOff\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "lcdWrite",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-lcd-writte",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-lcd-writte-write"
      },
      {
        "id": "TEXT",
        "alias": "stringInput",
        "defaultValue": "bloq-lcd-default"
      },
      {
        "alias": "text",
        "value": "bloq-lcd-writte-inLCD"
      },
      {
        "id": "LCD",
        "alias": "dynamicDropdown",
        "options": "lcds"
      }
    ]
  ],
  "code": "{LCD}.print(\"{TEXT}\");",
  "arduino": {
    "includes": [
      "Wire.h",
      "BitbloqLiquidCrystal.h"
    ],
    "needInstanceOf": [
      {
        "name": "{LCD}",
        "type": "LiquidCrystal",
        "arguments": [
          0
        ]
      }
    ],
    "setupExtraCode": "{LCD}.begin(16, 2);{LCD}.clear();",
    "code": "{LCD}.print(\"{TEXT}\");"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"lcdWrite\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "lcdWritePosition",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-lcd-writte",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-lcd-writte-write"
      },
      {
        "id": "TEXT",
        "alias": "stringInput",
        "defaultValue": "bloq-lcd-default"
      },
      {
        "alias": "text",
        "value": "bloq-lcd-writte-inLCD"
      },
      {
        "id": "LCD",
        "alias": "dynamicDropdown",
        "options": "lcds"
      },
      {
        "alias": "text",
        "value": "bloq-lcd-writte-advanced-inPosition"
      },
      {
        "id": "COLUMN",
        "alias": "numberInput",
        "value": 0
      },
      {
        "id": "ROW",
        "alias": "numberInput",
        "value": 0
      }
    ]
  ],
  "code": "{LCD}.setCursor({COLUMN},{ROW});{LCD}.print(\"{TEXT}\");",
  "arduino": {
    "includes": [
      "Wire.h",
      "BitbloqLiquidCrystal.h"
    ],
    "needInstanceOf": [
      {
        "name": "{LCD}",
        "type": "LiquidCrystal",
        "arguments": [
          0
        ]
      }
    ],
    "setupExtraCode": "{LCD}.begin(16, 2);{LCD}.clear();",
    "code": "{LCD}.setCursor({COLUMN},{ROW});{LCD}.print(\"{TEXT}\");"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"lcdWritePosition\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "led",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-led",
  "content": [
    [
      {
        "id": "STATE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-led-turnon",
            "value": "HIGH"
          },
          {
            "label": "bloq-led-turnoff",
            "value": "LOW"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-led-theLED"
      },
      {
        "id": "LED",
        "alias": "dynamicDropdown",
        "options": "leds"
      }
    ]
  ],
  "code": "digitalWrite({LED},{STATE});",
  "arduino": {
    "needInstanceOf": [
      {
        "name": "{LED}",
        "type": "const int",
        "equals": "º[{LED}.pin.s]"
      }
    ],
    "setupExtraCode": "pinMode({LED}, OUTPUT);",
    "code": "digitalWrite({LED},{STATE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"led\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "oscillator",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-oscillator",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-oscillator-oscillate"
      },
      {
        "id": "OSCILLATOR",
        "alias": "dynamicDropdown",
        "options": "oscillators"
      },
      {
        "alias": "text",
        "value": "bloq-oscillator-around"
      },
      {
        "id": "PHASE",
        "alias": "numberInput",
        "value": 90
      },
      {
        "alias": "text",
        "value": "bloq-oscillator-amplitude"
      },
      {
        "id": "AMPLITUDE",
        "alias": "numberInput",
        "value": 90
      },
      {
        "alias": "text",
        "value": "bloq-common-every"
      },
      {
        "id": "SPEED",
        "alias": "numberInput",
        "value": 2000
      },
      {
        "alias": "text",
        "value": "bloq-common-ms"
      }
    ]
  ],
  "code": "{OSCILLATOR}.SetO({PHASE});{OSCILLATOR}.SetA({AMPLITUDE});{OSCILLATOR}.SetT({SPEED});{OSCILLATOR}.refresh();",
  "arduino": {
    "includes": [
      "Servo.h",
      "Wire.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "{OSCILLATOR}",
        "type": "Oscillator"
      }
    ],
    "setupExtraCode": "{OSCILLATOR}.attach(º[{OSCILLATOR}.pin.s]);",
    "code": "{OSCILLATOR}.SetO({PHASE});{OSCILLATOR}.SetA({AMPLITUDE});{OSCILLATOR}.SetT({SPEED});{OSCILLATOR}.refresh();"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"oscillator\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "oscillatorStart",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-oscillator-start",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-oscillator-start-oscillator"
      },
      {
        "id": "OSCILLATOR",
        "alias": "dynamicDropdown",
        "options": "oscillators"
      }
    ]
  ],
  "code": "{OSCILLATOR}.Play();{OSCILLATOR}.refresh();",
  "arduino": {
    "includes": [
      "Servo.h",
      "Wire.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "{OSCILLATOR}",
        "type": "Oscillator"
      }
    ],
    "setupExtraCode": "{OSCILLATOR}.attach(º[{OSCILLATOR}.pin.s]);",
    "code": "{OSCILLATOR}.Play();{OSCILLATOR}.refresh();"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"oscillatorStart\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "oscillatorStop",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-oscillator-stop",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-oscillator-stop-stop"
      },
      {
        "id": "OSCILLATOR",
        "alias": "dynamicDropdown",
        "options": "oscillators"
      }
    ]
  ],
  "code": "{OSCILLATOR}.Stop();",
  "arduino": {
    "includes": [
      "Servo.h",
      "Wire.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "{OSCILLATOR}",
        "type": "Oscillator"
      }
    ],
    "setupExtraCode": "{OSCILLATOR}.attach(º[{OSCILLATOR}.pin.s]);",
    "code": "{OSCILLATOR}.Stop();"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"oscillatorStop\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "oscillatorTimes",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-oscillator",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-oscillator-oscillate"
      },
      {
        "id": "OSCILLATOR",
        "alias": "dynamicDropdown",
        "options": "oscillators"
      },
      {
        "alias": "text",
        "value": "bloq-oscillator-around"
      },
      {
        "id": "PHASE",
        "alias": "numberInput",
        "value": 90
      },
      {
        "alias": "text",
        "value": "bloq-oscillator-amplitude"
      },
      {
        "id": "AMPLITUDE",
        "alias": "numberInput",
        "value": 90
      },
      {
        "alias": "text",
        "value": "bloq-oscillator-speed"
      },
      {
        "id": "SPEED",
        "alias": "numberInput",
        "value": 2000
      },
      {
        "id": "TIMES",
        "alias": "numberInput",
        "value": 2
      },
      {
        "alias": "text",
        "value": "bloq-oscillator-times"
      }
    ]
  ],
  "code": "oscillate({OSCILLATOR}, {AMPLITUDE}, {PHASE}, {SPEED}, {TIMES});",
  "arduino": {
    "includes": [
      "Servo.h",
      "Wire.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "{OSCILLATOR}",
        "type": "Oscillator"
      }
    ],
    "setupExtraCode": "{OSCILLATOR}.attach(º[{OSCILLATOR}.pin.s]);",
    "code": "oscillate({OSCILLATOR}, {AMPLITUDE}, {PHASE}, {SPEED}, {TIMES});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"oscillatorTimes\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "readSensor",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-read-sensor",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-read-read"
      },
      {
        "id": "SENSOR",
        "alias": "dynamicDropdown",
        "options": "sensors"
      }
    ]
  ],
  "code": "{SENSOR.type}",
  "returnType": {
    "type": "fromDynamicDropdown",
    "idDropdown": "SENSOR",
    "options": "sensors"
  },
  "arduino": {
    "code": "¬{SENSOR.readSensor}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"readSensor\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "clockRTCAdvanced",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-rtc-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-rtc-advanced"
      },
      {
        "id": "FUNCTION",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-rtc-date-2",
            "value": "getDate",
            "type": "String"
          },
          {
            "label": "bloq-rtc-time-2",
            "value": "getTime",
            "type": "String"
          },
          {
            "label": "bloq-rtc-hour",
            "value": "getHour",
            "type": "float"
          },
          {
            "label": "bloq-rtc-minute",
            "value": "getMinute",
            "type": "float"
          },
          {
            "label": "bloq-rtc-second",
            "value": "getSecond",
            "type": "float"
          },
          {
            "label": "bloq-rtc-day",
            "value": "getDay",
            "type": "float"
          },
          {
            "label": "bloq-rtc-month",
            "value": "getMonth",
            "type": "float"
          },
          {
            "label": "bloq-rtc-year",
            "value": "getYear",
            "type": "float"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-rtc-using-advanced"
      },
      {
        "id": "RTC",
        "alias": "dynamicDropdown",
        "options": "clocks"
      }
    ]
  ],
  "code": "{RTC}.{FUNCTION}()",
  "returnType": {
    "type": "fromStaticDropdownProperty",
    "idDropdown": "FUNCTION",
    "dropdownProperty": "type"
  },
  "arduino": {
    "code": "{RTC}.{FUNCTION}()"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"clockRTCAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "clockRTCInit",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-rtc-init",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-rtc-init"
      },
      {
        "id": "RTC",
        "alias": "dynamicDropdown",
        "options": "clocks"
      }
    ]
  ],
  "code": "{RTC}.adjust(DateTime(__DATE__, __TIME__));",
  "arduino": {
    "code": "{RTC}.adjust(DateTime(__DATE__, __TIME__));"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"clockRTCInit\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "servoNormal",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-servo",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-servo-move"
      },
      {
        "id": "SERVO",
        "alias": "dynamicDropdown",
        "options": "servos"
      },
      {
        "alias": "text",
        "value": "bloq-servo-to"
      },
      {
        "id": "POSITION",
        "alias": "numberInput",
        "value": 90
      },
      {
        "alias": "text",
        "value": "bloq-servo-degrees"
      }
    ]
  ],
  "code": "{SERVO}.write({POSITION});",
  "arduino": {
    "code": "{SERVO}.write({POSITION});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"servoNormal\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "caseAdvanced-v1",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom",
      "acceptedAliases": [
        "switchChildren",
        "case"
      ]
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "case"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string"
      ],
      "name": "ed7b2a9c-582e-454b-8cbc-4025bb8a332f"
    }
  ],
  "bloqClass": "bloq-case",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-case-ifSameTo"
      },
      {
        "bloqInputId": "VALUE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string"
        ],
        "name": "ed7b2a9c-582e-454b-8cbc-4025bb8a332f"
      },
      {
        "alias": "text",
        "value": "bloq-case-exec"
      }
    ]
  ],
  "code": "case {VALUE}:{STATEMENTS}break;",
  "arduino": {
    "code": "case {VALUE}:{STATEMENTS}break;"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"caseAdvanced-v1\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "elseifAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom",
      "acceptedAliases": [
        "ifDown",
        "elseifDown"
      ]
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "all",
        "elseifDown"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "equalityOperations",
        "logicOperations"
      ],
      "name": "9a48f1eb-b9a5-49ab-b07f-c1c7e191fcc7"
    }
  ],
  "bloqClass": "bloq-else-if",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-else-if-if"
      },
      {
        "bloqInputId": "VAR",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "equalityOperations",
          "logicOperations"
        ],
        "name": "9a48f1eb-b9a5-49ab-b07f-c1c7e191fcc7"
      },
      {
        "alias": "text",
        "value": "bloq-else-if-else"
      }
    ]
  ],
  "code": "else if ({VAR}){{STATEMENTS}}",
  "arduino": {
    "code": "else if ({VAR}){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"elseifAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "forAdvanced-v1",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "selectVariable"
      ],
      "name": "e27f2804-4a12-4df6-a203-41c1b800d1bd"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "2a473f6b-cb6c-4bce-afd6-ce37c9944aa5"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "33945566-c8e6-4fb5-8a2e-95dbd3e082fe"
    }
  ],
  "bloqClass": "bloq-for",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-for-count"
      },
      {
        "bloqInputId": "VAR",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable"
        ],
        "name": "e27f2804-4a12-4df6-a203-41c1b800d1bd"
      },
      {
        "alias": "text",
        "value": "bloq-for-from"
      },
      {
        "bloqInputId": "INIT",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "2a473f6b-cb6c-4bce-afd6-ce37c9944aa5"
      },
      {
        "alias": "text",
        "value": "bloq-for-to"
      },
      {
        "bloqInputId": "FINAL",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "33945566-c8e6-4fb5-8a2e-95dbd3e082fe"
      },
      {
        "id": "MODE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-for-add",
            "value": "+"
          },
          {
            "label": "bloq-for-subtract",
            "value": "-"
          }
        ]
      },
      {
        "id": "ADD",
        "alias": "numberInput",
        "value": 1
      },
      {
        "alias": "text",
        "value": "bloq-for-exec"
      }
    ]
  ],
  "code": "'for({VAR}={INIT};{VAR}' + ('{MODE}' === '+'?'<=':'>=' ) + '{FINAL};{VAR}{MODE}={ADD}){{STATEMENTS}}'",
  "arduino": {
    "conditional": {
      "aliasId": "MODE",
      "code": {
        "+": "for({VAR}={INIT};{VAR} <= {FINAL};{VAR} += {ADD}){{STATEMENTS}}",
        "-": "for({VAR}={INIT};{VAR} >= {FINAL};{VAR} -= {ADD}){{STATEMENTS}}"
      }
    }
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"forAdvanced-v1\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "ifAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "all",
        "ifDown"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "equalityOperations",
        "logicOperations"
      ],
      "name": "d1b9e982-ea5f-48f0-a5d5-095e3afd0d96"
    }
  ],
  "bloqClass": "bloq-if",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-if-if"
      },
      {
        "bloqInputId": "CONDITION",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "equalityOperations",
          "logicOperations"
        ],
        "name": "d1b9e982-ea5f-48f0-a5d5-095e3afd0d96"
      },
      {
        "alias": "text",
        "value": "bloq-if-exec"
      }
    ]
  ],
  "code": "if({CONDITION}){{STATEMENTS}}",
  "arduino": {
    "code": "if({CONDITION}){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"ifAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "magicForAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "selectVariable",
        "number"
      ],
      "name": "859198d1-e0f7-4a53-8820-a339f4752ce7"
    }
  ],
  "bloqClass": "bloq-magicfor",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-magicfor-repeat"
      },
      {
        "bloqInputId": "TIMES",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "number"
        ],
        "name": "859198d1-e0f7-4a53-8820-a339f4752ce7"
      },
      {
        "alias": "text",
        "value": "bloq-magicfor-times"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "code": "for(int bitbloqForCounter=0;bitbloqForCounter < {TIMES};bitbloqForCounter += 1){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"magicForAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "switchAdvanced-v2",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top",
      "acceptedAliases": [
        "switchChildren"
      ]
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "selectVariable",
        "readSensor"
      ],
      "name": "b3ec02e5-3eba-40c7-b473-6ecf5170b994"
    }
  ],
  "bloqClass": "bloq-switch",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-switch-check"
      },
      {
        "bloqInputId": "VAR",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "readSensor"
        ],
        "name": "b3ec02e5-3eba-40c7-b473-6ecf5170b994"
      }
    ]
  ],
  "code": "switch ({VAR}) {{STATEMENTS}}",
  "arduino": {
    "code": "switch ({VAR}) {{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"switchAdvanced-v2\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "waitAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "b614c553-ad76-4226-b11f-b3da9bf3b503"
    }
  ],
  "bloqClass": "bloq-wait",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-wait-wait"
      },
      {
        "bloqInputId": "TIME",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "b614c553-ad76-4226-b11f-b3da9bf3b503"
      }
    ]
  ],
  "code": "delay({TIME});",
  "arduino": {
    "code": "delay({TIME});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"waitAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "whileAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "equalityOperations",
        "logicOperations"
      ],
      "name": "8102b941-bf32-45c2-9e60-7d64e7908b2f"
    }
  ],
  "bloqClass": "bloq-while",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-while-while"
      },
      {
        "bloqInputId": "CONDITION",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "equalityOperations",
          "logicOperations"
        ],
        "name": "8102b941-bf32-45c2-9e60-7d64e7908b2f"
      },
      {
        "alias": "text",
        "value": "bloq-while-exec"
      }
    ]
  ],
  "code": "while ({CONDITION}){{STATEMENTS}}",
  "arduino": {
    "code": "while ({CONDITION}){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"whileAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "break",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-break",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-break-stopLoop"
      }
    ]
  ],
  "code": "break;",
  "arduino": {
    "code": "break;"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"break\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "case",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom",
      "acceptedAliases": [
        "switchChildren",
        "case"
      ]
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "case"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-case",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-case-ifSameTo"
      },
      {
        "id": "VAR",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "bloq-case-exec"
      }
    ]
  ],
  "code": "case {VAR}:{STATEMENTS}break;",
  "arduino": {
    "code": "case {VAR}:{STATEMENTS}break;"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"case\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "caseDefault",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom",
      "acceptedAliases": [
        "switchChildren",
        "case"
      ]
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-case-default",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-case-default-inOtherCase"
      }
    ]
  ],
  "code": "default:{STATEMENTS}break;",
  "arduino": {
    "code": "default:{STATEMENTS}break;"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"caseDefault\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "continue",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-continue",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-continue-continue"
      }
    ]
  ],
  "code": "continue;",
  "arduino": {
    "code": "continue;"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"continue\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "for",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-for deprecated",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-for-count"
      },
      {
        "id": "VAR",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      },
      {
        "alias": "text",
        "value": "bloq-for-from"
      },
      {
        "id": "INIT",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "bloq-for-to"
      },
      {
        "id": "FINAL",
        "alias": "numberInput",
        "value": 10
      },
      {
        "id": "MODE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-for-add",
            "value": "++"
          },
          {
            "label": "bloq-for-subtract",
            "value": "--"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-for-exec"
      }
    ]
  ],
  "code": "for({VAR}={INIT};{VAR}<{FINAL};{VAR}{MODE}){{STATEMENTS}}",
  "arduino": {
    "conditional": {
      "aliasId": "MODE",
      "code": {
        "+": "for({VAR}={INIT};{VAR} <= {FINAL};{VAR} += {ADD}){{STATEMENTS}}",
        "-": "for({VAR}={INIT};{VAR} >= {FINAL};{VAR} -= {ADD}){{STATEMENTS}}"
      }
    }
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"for\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "forAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "name": "dcc3fe62-695f-43ad-8883-5b4bc6202ab6"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "name": "9646fd6c-5fa0-4a04-b632-374ae924e9b3"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "name": "a1648da7-1d21-4236-a96a-21ad9e8c3106"
    }
  ],
  "bloqClass": "bloq-for deprecated",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-for-count"
      },
      {
        "bloqInputId": "VAR",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "name": "dcc3fe62-695f-43ad-8883-5b4bc6202ab6"
      },
      {
        "alias": "text",
        "value": "bloq-for-from"
      },
      {
        "bloqInputId": "INIT",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "name": "9646fd6c-5fa0-4a04-b632-374ae924e9b3"
      },
      {
        "alias": "text",
        "value": "bloq-for-to"
      },
      {
        "bloqInputId": "FINAL",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "name": "a1648da7-1d21-4236-a96a-21ad9e8c3106"
      },
      {
        "id": "MODE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-for-add",
            "value": "++"
          },
          {
            "label": "bloq-for-subtract",
            "value": "--"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-for-exec"
      }
    ]
  ],
  "code": "for({VAR}={INIT};{VAR}<{FINAL};{VAR}{MODE}){{STATEMENTS}}",
  "arduino": {
    "conditional": {
      "aliasId": "MODE",
      "code": {
        "+": "for({VAR}={INIT};{VAR} <= {FINAL};{VAR} += {ADD}){{STATEMENTS}}",
        "-": "for({VAR}={INIT};{VAR} >= {FINAL};{VAR} -= {ADD}){{STATEMENTS}}"
      }
    }
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"forAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "switchAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "name": "d6b5ce91-cf2e-4f74-a4eb-b2bdeca134b3"
    }
  ],
  "bloqClass": "bloq-switch",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-switch-check"
      },
      {
        "bloqInputId": "VAR",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "name": "d6b5ce91-cf2e-4f74-a4eb-b2bdeca134b3"
      }
    ]
  ],
  "code": "switch (int({VAR})) {{STATEMENTS}}",
  "arduino": {
    "code": "switch (int({VAR})) {{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"switchAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "else",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom",
      "acceptedAliases": [
        "ifDown",
        "elseifDown"
      ]
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-else",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-else-else"
      }
    ]
  ],
  "code": "else {{STATEMENTS}}",
  "python": {
    "codeLines": [
      {
        "code": "else:"
      },
      {
        "indentation": 1,
        "code": "{STATEMENTS}"
      }
    ]
  },
  "arduino": {
    "code": "else {{STATEMENTS}}"
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "elseif",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom",
      "acceptedAliases": [
        "ifDown",
        "elseifDown"
      ]
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "all",
        "elseifDown"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string",
        "selectVariable",
        "readSensor"
      ],
      "name": "46ffef46-67ee-4675-8541-6bff80d37193"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string",
        "selectVariable",
        "readSensor"
      ],
      "name": "b6c0fbd8-ba77-496b-8eab-a7744b212704"
    }
  ],
  "bloqClass": "bloq-else-if",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-else-if-if"
      },
      {
        "bloqInputId": "ARG1",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "readSensor"
        ],
        "name": "46ffef46-67ee-4675-8541-6bff80d37193"
      },
      {
        "id": "OPERATOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "=",
            "value": "=="
          },
          {
            "label": "!=",
            "value": "!="
          },
          {
            "label": ">",
            "value": ">"
          },
          {
            "label": ">=",
            "value": ">="
          },
          {
            "label": "<",
            "value": "<"
          },
          {
            "label": "<=",
            "value": "<="
          }
        ]
      },
      {
        "bloqInputId": "ARG2",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "readSensor"
        ],
        "name": "b6c0fbd8-ba77-496b-8eab-a7744b212704"
      },
      {
        "alias": "text",
        "value": "bloq-else-if-else"
      }
    ]
  ],
  "code": "else if ({ARG1} {OPERATOR} {ARG2}){{STATEMENTS}}",
  "python": {
    "codeLines": [
      {
        "code": "elif({ARG1} {OPERATOR} {ARG2}):"
      },
      {
        "indentation": 1,
        "code": "{STATEMENTS}"
      }
    ]
  },
  "arduino": {
    "code": "else if ({ARG1} {OPERATOR} {ARG2}){{STATEMENTS}}"
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "for-v1",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-for",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-for-count"
      },
      {
        "id": "VAR",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      },
      {
        "alias": "text",
        "value": "bloq-for-from"
      },
      {
        "id": "INIT",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "bloq-for-to"
      },
      {
        "id": "FINAL",
        "alias": "numberInput",
        "value": 10
      },
      {
        "id": "MODE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-for-add",
            "value": "+"
          },
          {
            "label": "bloq-for-subtract",
            "value": "-"
          }
        ]
      },
      {
        "id": "ADD",
        "alias": "numberInput",
        "value": 1
      },
      {
        "alias": "text",
        "value": "bloq-for-exec"
      }
    ]
  ],
  "code": "'for({VAR}={INIT};{VAR}' + ('{MODE}' === '+'?'<=':'>=' ) + '{FINAL};{VAR}{MODE}={ADD}){{STATEMENTS}}'",
  "arduino": {
    "conditional": {
      "aliasId": "MODE",
      "code": {
        "+": "for({VAR}={INIT};{VAR} <= {FINAL};{VAR} += {ADD}){{STATEMENTS}}",
        "-": "for({VAR}={INIT};{VAR} >= {FINAL};{VAR} -= {ADD}){{STATEMENTS}}"
      }
    }
  },
  "python": {
    "codeLines": [
      {
        "conditional": {
          "aliasId": "MODE",
          "code": {
            "+": "for {VAR} in range({INIT}, {FINAL}):",
            "-": "for {VAR} in range({FINAL}, {INIT}, -1):"
          }
        }
      },
      {
        "indentation": 1,
        "code": "{STATEMENTS}"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "if",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "all",
        "ifDown"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string",
        "selectVariable",
        "readSensor"
      ],
      "name": "73cfe596-c4e3-4e17-9b54-f5c7b54a52c4"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string",
        "boolean",
        "selectVariable",
        "readSensor"
      ],
      "name": "7624e929-43fa-4bc9-a517-4207ebbf0b2e"
    }
  ],
  "bloqClass": "bloq-if",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-if-if"
      },
      {
        "bloqInputId": "ARG1",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "readSensor"
        ],
        "name": "73cfe596-c4e3-4e17-9b54-f5c7b54a52c4"
      },
      {
        "id": "OPERATOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "=",
            "value": "=="
          },
          {
            "label": "!=",
            "value": "!="
          },
          {
            "label": ">",
            "value": ">"
          },
          {
            "label": ">=",
            "value": ">="
          },
          {
            "label": "<",
            "value": "<"
          },
          {
            "label": "<=",
            "value": "<="
          }
        ]
      },
      {
        "bloqInputId": "ARG2",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "boolean",
          "selectVariable",
          "readSensor"
        ],
        "name": "7624e929-43fa-4bc9-a517-4207ebbf0b2e"
      },
      {
        "alias": "text",
        "value": "bloq-if-exec"
      }
    ]
  ],
  "code": "if({ARG1} {OPERATOR} {ARG2}){{STATEMENTS}}",
  "arduino": {
    "code": "if({ARG1} {OPERATOR} {ARG2}){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "if({ARG1} {OPERATOR} {ARG2}):"
      },
      {
        "indentation": 1,
        "code": "{STATEMENTS}"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "magicFor",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-magicfor",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-magicfor-repeat"
      },
      {
        "id": "TIMES",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "bloq-magicfor-times"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "code": "for(int bitbloqForCounter=0;bitbloqForCounter < {TIMES};bitbloqForCounter += 1){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"magicFor\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "millis",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-millis",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-millis"
      }
    ]
  ],
  "code": "millis()",
  "arduino": {
    "code": "millis()"
  },
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"millis\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "switch",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top",
      "acceptedAliases": [
        "switchChildren"
      ]
    }
  ],
  "bloqClass": "bloq-switch",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-switch-check"
      },
      {
        "id": "VAR",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      }
    ]
  ],
  "code": "switch (int({VAR})) {{STATEMENTS}}",
  "arduino": {
    "code": "switch (int({VAR})) {{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"switch\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "wait",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-wait",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-wait-wait"
      },
      {
        "id": "TIME",
        "alias": "numberInput",
        "value": 2000
      },
      {
        "alias": "text",
        "value": "bloq-wait-ms"
      }
    ]
  ],
  "code": "delay({TIME});",
  "arduino": {
    "code": "delay({TIME});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"wait\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "while",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string",
        "selectVariable",
        "readSensor"
      ],
      "name": "05d3acf3-f325-4095-8884-9050c95524c7"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string",
        "boolean",
        "selectVariable",
        "readSensor"
      ],
      "name": "e46461be-a6f4-4968-9927-daa3dbd8d8b7"
    }
  ],
  "bloqClass": "bloq-while",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-while-while"
      },
      {
        "bloqInputId": "ARG1",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "readSensor"
        ],
        "name": "05d3acf3-f325-4095-8884-9050c95524c7"
      },
      {
        "id": "OPERATOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "=",
            "value": "=="
          },
          {
            "label": "!=",
            "value": "!="
          },
          {
            "label": ">",
            "value": ">"
          },
          {
            "label": ">=",
            "value": ">="
          },
          {
            "label": "<",
            "value": "<"
          },
          {
            "label": "<=",
            "value": "<="
          }
        ]
      },
      {
        "bloqInputId": "ARG2",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "boolean",
          "selectVariable",
          "readSensor"
        ],
        "name": "e46461be-a6f4-4968-9927-daa3dbd8d8b7"
      },
      {
        "alias": "text",
        "value": "bloq-while-exec"
      }
    ]
  ],
  "code": "while ({ARG1} {OPERATOR} {ARG2}){{STATEMENTS}}",
  "python": {
    "codeLines": [
      {
        "code": "while ({ARG1} {OPERATOR} {ARG2}):"
      },
      {
        "indentation": 1,
        "code": "{STATEMENTS}"
      }
    ]
  },
  "arduino": {
    "code": "while ({ARG1} {OPERATOR} {ARG2}){{STATEMENTS}}"
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "numConversion",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "0f00db92-9562-45b2-90cb-369798a09ea5"
    }
  ],
  "bloqClass": "bloq-num-conversion",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-num-conversion"
      },
      {
        "bloqInputId": "NUMBER",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "0f00db92-9562-45b2-90cb-369798a09ea5"
      },
      {
        "alias": "text",
        "value": "bloq-num-conversion-to"
      },
      {
        "id": "TYPE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-num-conversion-int",
            "value": "int"
          },
          {
            "label": "bloq-num-conversion-float",
            "value": "float"
          }
        ]
      }
    ]
  ],
  "code": "({TYPE}) {NUMBER}",
  "arduino": {
    "code": "({TYPE}) {NUMBER}"
  },
  "returnType": {
    "type": "fromDropdown",
    "idDropdown": "TYPE"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"numConversion\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "stringToInt",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "String"
      ],
      "name": "9d4b09d5-9c06-4c98-9f4f-6b9869b1122f"
    }
  ],
  "bloqClass": "bloq-string-to-int",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-string-to-int"
      },
      {
        "bloqInputId": "VAR",
        "alias": "bloqInput",
        "acceptType": [
          "String"
        ],
        "name": "9d4b09d5-9c06-4c98-9f4f-6b9869b1122f"
      }
    ]
  ],
  "code": "{VAR}.toInt()",
  "arduino": {
    "code": "{VAR}.toInt()"
  },
  "returnType": {
    "type": "simple",
    "value": "int"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"stringToInt\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "evolutionDistance",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-evolution-distance",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-evolution-distance"
      }
    ]
  ],
  "code": "evolution.getDistance()",
  "arduino": {
    "includes": [
      "BitbloqEvolution.h",
      "BitbloqUS.h",
      "Servo.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "evolution",
        "type": "Evolution"
      }
    ],
    "setupExtraCode": "evolution.init();",
    "code": "evolution.getDistance()"
  },
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"evolutionDistance\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "evolutionHeadAdvance",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "31255377-0ca4-4249-9f1f-1ae3d09742fb"
    }
  ],
  "bloqClass": "bloq-evolution-head",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-evolution-head-advance"
      },
      {
        "bloqInputId": "DEGREES",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "31255377-0ca4-4249-9f1f-1ae3d09742fb"
      },
      {
        "alias": "text",
        "value": "bloq-evolution-head-advance-deg"
      },
      {
        "id": "SIDE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-evolution-head-advance-left",
            "value": "HEAD_LEFT"
          },
          {
            "label": "bloq-evolution-head-advance-right",
            "value": "HEAD_RIGHT"
          }
        ]
      }
    ]
  ],
  "code": "'{SIDE}' === 'HEAD_LEFT'? 'evolution.turnHead({DEGREES});' : 'evolution.turnHead(-{DEGREES});'",
  "arduino": {
    "includes": [
      "BitbloqEvolution.h",
      "BitbloqUS.h",
      "Servo.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "evolution",
        "type": "Evolution"
      }
    ],
    "setupExtraCode": "evolution.init();",
    "conditional": {
      "aliasId": "SIDE",
      "code": {
        "HEAD_LEFT": "evolution.turnHead({DEGREES});",
        "HEAD_RIGHT": "evolution.turnHead(-{DEGREES});"
      }
    }
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"evolutionHeadAdvance\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "evolutionLight",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-evolution-light",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-evolution-light"
      },
      {
        "id": "SIDE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-evolution-light-left",
            "value": "LEFT"
          },
          {
            "label": "bloq-evolution-light-right",
            "value": "RIGHT"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-evolution-light-evolution"
      }
    ]
  ],
  "code": "evolution.getLight({SIDE})",
  "arduino": {
    "includes": [
      "BitbloqEvolution.h",
      "BitbloqUS.h",
      "Servo.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "evolution",
        "type": "Evolution"
      }
    ],
    "setupExtraCode": "evolution.init();",
    "code": "evolution.getLight({SIDE})"
  },
  "returnType": {
    "type": "simple",
    "value": "int"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"evolutionLight\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "evolutionLine",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-evolution-line",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-evolution-line"
      },
      {
        "id": "SIDE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-evolution-line-left",
            "value": "LEFT"
          },
          {
            "label": "bloq-evolution-line-right",
            "value": "RIGHT"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-evolution-line-evolution"
      }
    ]
  ],
  "code": "evolution.getLine({SIDE})",
  "arduino": {
    "includes": [
      "BitbloqEvolution.h",
      "BitbloqUS.h",
      "Servo.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "evolution",
        "type": "Evolution"
      }
    ],
    "setupExtraCode": "evolution.init();",
    "code": "evolution.getLine({SIDE})"
  },
  "returnType": {
    "type": "simple",
    "value": "int"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"evolutionLine\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "evolutionBuzzer",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-evolution-buzzer",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-evolution-buzzer"
      },
      {
        "id": "NOTE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-evolution-buzzer-do",
            "value": "note_C4"
          },
          {
            "label": "bloq-evolution-buzzer-re",
            "value": "note_D4"
          },
          {
            "label": "bloq-evolution-buzzer-mi",
            "value": "note_E4"
          },
          {
            "label": "bloq-evolution-buzzer-fa",
            "value": "note_F4"
          },
          {
            "label": "bloq-evolution-buzzer-sol",
            "value": "note_G4"
          },
          {
            "label": "bloq-evolution-buzzer-la",
            "value": "note_A4"
          },
          {
            "label": "bloq-evolution-buzzer-si",
            "value": "note_B4"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-evolution-buzzer-for"
      },
      {
        "id": "SECONDS",
        "alias": "numberInput",
        "value": 1000
      },
      {
        "alias": "text",
        "value": "bloq-evolution-buzzer-ms"
      }
    ]
  ],
  "code": "evolution._tone({NOTE},{SECONDS});",
  "arduino": {
    "includes": [
      "BitbloqEvolution.h",
      "BitbloqUS.h",
      "Servo.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "evolution",
        "type": "Evolution"
      }
    ],
    "setupExtraCode": "evolution.init();",
    "code": "evolution._tone({NOTE},{SECONDS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"evolutionBuzzer\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "evolutionHead",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-evolution-head",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-evolution-head"
      },
      {
        "id": "SIDE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-evolution-head-center",
            "value": "HEAD_CENTER"
          },
          {
            "label": "bloq-evolution-head-left",
            "value": "HEAD_LEFT"
          },
          {
            "label": "bloq-evolution-head-right",
            "value": "HEAD_RIGHT"
          }
        ]
      }
    ]
  ],
  "code": "evolution.turnHead({SIDE});",
  "arduino": {
    "includes": [
      "BitbloqEvolution.h",
      "BitbloqUS.h",
      "Servo.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "evolution",
        "type": "Evolution"
      }
    ],
    "setupExtraCode": "evolution.init();",
    "code": "evolution.turnHead({SIDE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"evolutionHead\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "evolutionHome",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-evolution-rest",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-evolution-rest"
      }
    ]
  ],
  "code": "evolution.home();",
  "arduino": {
    "includes": [
      "BitbloqEvolution.h",
      "BitbloqUS.h",
      "Servo.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "evolution",
        "type": "Evolution"
      }
    ],
    "setupExtraCode": "evolution.init();",
    "code": "evolution.home();"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"evolutionHome\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "evolutionIfDistance",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "all",
        "ifDown"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-evolution-if-distance",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-evolution-if-distance"
      },
      {
        "id": "OPERATOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-evolution-if-distance-less",
            "value": "<"
          },
          {
            "label": "bloq-evolution-if-distance-more",
            "value": ">"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-evolution-if-distance-than"
      },
      {
        "id": "DISTANCE",
        "alias": "numberInput",
        "value": 15
      },
      {
        "alias": "text",
        "value": "bloq-evolution-if-distance-then"
      }
    ]
  ],
  "code": "if(evolution.getDistance() {OPERATOR} {DISTANCE}){{STATEMENTS}}",
  "arduino": {
    "includes": [
      "BitbloqEvolution.h",
      "BitbloqUS.h",
      "Servo.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "evolution",
        "type": "Evolution"
      }
    ],
    "setupExtraCode": "evolution.init();",
    "code": "if(evolution.getDistance() {OPERATOR} {DISTANCE}){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"evolutionIfDistance\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "evolutionIfLight",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "all",
        "ifDown"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-evolution-if-light",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-evolution-if-light"
      },
      {
        "id": "RANGELEFT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-evolution-if-light-high",
            "value": "HIGH_LIGHT"
          },
          {
            "label": "bloq-evolution-if-light-medium",
            "value": "MEDIUM_LIGHT"
          },
          {
            "label": "bloq-evolution-if-light-low",
            "value": "LOW_LIGHT"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-evolution-if-light-and"
      },
      {
        "id": "RANGERIGHT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-evolution-if-light-high",
            "value": "HIGH_LIGHT"
          },
          {
            "label": "bloq-evolution-if-light-medium",
            "value": "MEDIUM_LIGHT"
          },
          {
            "label": "bloq-evolution-if-light-low",
            "value": "LOW_LIGHT"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-evolution-if-light-then"
      }
    ]
  ],
  "code": "if(evolution.getLightRange(LEFT,{RANGELEFT}) && evolution.getLightRange(RIGHT,{RANGERIGHT})){{STATEMENTS}}",
  "arduino": {
    "includes": [
      "BitbloqEvolution.h",
      "BitbloqUS.h",
      "Servo.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "evolution",
        "type": "Evolution"
      }
    ],
    "setupExtraCode": "evolution.init();",
    "code": "if(evolution.getLightRange(LEFT,{RANGELEFT}) && evolution.getLightRange(RIGHT,{RANGERIGHT})){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"evolutionIfLight\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "evolutionIfLine",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "all",
        "ifDown"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-evolution-if-line",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-evolution-if-line"
      },
      {
        "id": "LINELEFT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-evolution-if-line-white",
            "value": "1"
          },
          {
            "label": "bloq-evolution-if-line-black",
            "value": "0"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-evolution-if-line-and"
      },
      {
        "id": "LINERIGHT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-evolution-if-line-white",
            "value": "1"
          },
          {
            "label": "bloq-evolution-if-line-black",
            "value": "0"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-evolution-if-line-then"
      }
    ]
  ],
  "code": "if(evolution.getLine(LEFT) == {LINELEFT} && evolution.getLine(RIGHT) == {LINERIGHT}){{STATEMENTS}}",
  "arduino": {
    "includes": [
      "BitbloqEvolution.h",
      "BitbloqUS.h",
      "Servo.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "evolution",
        "type": "Evolution"
      }
    ],
    "setupExtraCode": "evolution.init();",
    "code": "if(evolution.getLine(LEFT) == {LINELEFT} && evolution.getLine(RIGHT) == {LINERIGHT}){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"evolutionIfLine\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "evolutionMovementsSimple",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-evolution-movements-simple",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-evolution-movements-simple"
      },
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-evolution-movements-simple-fordward",
            "value": "fordward"
          },
          {
            "label": "bloq-evolution-movements-simple-backward",
            "value": "backward"
          },
          {
            "label": "bloq-evolution-movements-simple-right",
            "value": "right"
          },
          {
            "label": "bloq-evolution-movements-simple-left",
            "value": "left"
          }
        ]
      }
    ]
  ],
  "code": "evolution.{MOVEMENT}();",
  "arduino": {
    "includes": [
      "BitbloqEvolution.h",
      "BitbloqUS.h",
      "Servo.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "evolution",
        "type": "Evolution"
      }
    ],
    "setupExtraCode": "evolution.init();",
    "code": "evolution.{MOVEMENT}();"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"evolutionMovementsSimple\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "argument",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-argument",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-argument-var"
      },
      {
        "id": "TYPE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-argument-int",
            "value": "int"
          },
          {
            "label": "bloq-argument-float",
            "value": "float"
          },
          {
            "label": "bloq-argument-string",
            "value": "String"
          },
          {
            "label": "bloq-argument-char",
            "value": "char"
          },
          {
            "label": "bloq-argument-bool",
            "value": "bool"
          }
        ]
      },
      {
        "id": "VARNAME",
        "alias": "varInput",
        "value": ""
      }
    ]
  ],
  "createDynamicContent": "softwareVars",
  "code": "{TYPE} {VARNAME}",
  "returnType": {
    "type": "fromDropdown",
    "idDropdown": "TYPE",
    "options": "softwareVars"
  },
  "arduino": {
    "code": "{TYPE} {VARNAME}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"argument\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "arguments",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "argument",
        "arguments",
        "number",
        "string",
        "selectVariable"
      ],
      "name": "cafd875b-822f-4f13-9199-17967771fb04"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "argument",
        "arguments",
        "number",
        "string",
        "selectVariable"
      ],
      "name": "ddd5c895-9722-4940-a225-149b60eb48b8"
    }
  ],
  "bloqClass": "bloq-arguments",
  "content": [
    [
      {
        "bloqInputId": "ARG1",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "argument",
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "cafd875b-822f-4f13-9199-17967771fb04"
      },
      {
        "alias": "text",
        "value": ","
      },
      {
        "bloqInputId": "ARG2",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "argument",
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "ddd5c895-9722-4940-a225-149b60eb48b8"
      }
    ]
  ],
  "createDynamicContent": "softwareVars",
  "code": "{ARG1},{ARG2}",
  "returnType": {
    "type": "simple",
    "value": "var"
  },
  "arduino": {
    "code": "{ARG1},{ARG2}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"arguments\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "invokeFunctionWithArguments",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string",
        "selectVariable",
        "arguments"
      ],
      "name": "61f63e88-e319-4e7d-939c-5b340a142093"
    }
  ],
  "bloqClass": "bloq-invoke-function-with-arguments",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-invoke-function-exec"
      },
      {
        "id": "FUNCTION",
        "alias": "dynamicDropdown",
        "options": "voidFunctions"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-function-args"
      },
      {
        "bloqInputId": "ARGS",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "arguments"
        ],
        "name": "61f63e88-e319-4e7d-939c-5b340a142093"
      }
    ]
  ],
  "code": "{FUNCTION}({ARGS});",
  "dynamicDropdown": {
    "idDropdown": "FUNCTION",
    "options": "voidFunctions"
  },
  "arduino": {
    "code": "{FUNCTION}({ARGS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"invokeFunctionWithArguments\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "invokeReturnFunctionWithArguments",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string",
        "selectVariable",
        "arguments"
      ],
      "name": "ce4de8bf-f610-4696-b2f5-456bba3065b5"
    }
  ],
  "bloqClass": "bloq-invoke-return-function-with-arguments",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-invoke-return-function-exec"
      },
      {
        "id": "FUNCTION",
        "alias": "dynamicDropdown",
        "options": "returnFunctions"
      },
      {
        "alias": "text",
        "value": "bloq-invoke-function-args"
      },
      {
        "bloqInputId": "ARGS",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "arguments"
        ],
        "name": "ce4de8bf-f610-4696-b2f5-456bba3065b5"
      }
    ]
  ],
  "code": "{FUNCTION}({ARGS})",
  "returnType": {
    "type": "fromDynamicDropdown",
    "idDropdown": "FUNCTION",
    "options": "returnFunctions"
  },
  "arduino": {
    "code": "{FUNCTION}({ARGS})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"invokeReturnFunctionWithArguments\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "return",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "selectVariable",
        "logicOperations",
        "equalityOperations"
      ],
      "name": "fd96ce1e-c769-4cd8-ac49-d05c9894f33f"
    }
  ],
  "bloqClass": "bloq-return",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-return-return"
      },
      {
        "bloqInputId": "RETURN",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "logicOperations",
          "equalityOperations"
        ],
        "name": "fd96ce1e-c769-4cd8-ac49-d05c9894f33f"
      }
    ]
  ],
  "code": "return {RETURN};",
  "arduino": {
    "code": "return {RETURN};"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"return\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "returnFunctionWithArguments",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "argument",
        "arguments",
        "number",
        "string",
        "selectVariable"
      ],
      "name": "b76eeb55-7701-4ca1-8c94-efc11d760131"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "selectVariable",
        "logicOperations",
        "equalityOperations"
      ],
      "name": "ecab641e-3700-4e15-b643-e0756a6eb9a2"
    }
  ],
  "bloqClass": "bloq-return-function-with-arguments",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-return-function-with-arguments-declare"
      },
      {
        "id": "FUNCNAME",
        "alias": "varInput",
        "placeholder": "bloq-functions-default"
      },
      {
        "alias": "text",
        "value": "bloq-return-function-with-arguments-count"
      },
      {
        "bloqInputId": "ARGS",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "argument",
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "b76eeb55-7701-4ca1-8c94-efc11d760131"
      },
      {
        "position": "DOWN",
        "alias": "text",
        "value": "bloq-return-function-with-arguments-return"
      },
      {
        "position": "DOWN",
        "bloqInputId": "RETURN",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "logicOperations",
          "equalityOperations"
        ],
        "name": "ecab641e-3700-4e15-b643-e0756a6eb9a2"
      }
    ]
  ],
  "createDynamicContent": "returnFunctions",
  "returnType": {
    "type": "fromInput",
    "bloqInputId": "RETURN"
  },
  "arguments": {
    "type": "fromInput",
    "bloqInputId": "ARGS"
  },
  "code": "{RETURN.connectionType} {FUNCNAME} ({ARGS}) {{STATEMENTS}return {RETURN};}",
  "arduino": {
    "code": "@{RETURN.returnType} {FUNCNAME} ({ARGS}) {{STATEMENTS}return {RETURN};}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"returnFunctionWithArguments\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "voidFunctionWithArguments",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "argument",
        "arguments",
        "number",
        "string",
        "selectVariable"
      ],
      "name": "4a676470-adfe-47b0-a9ab-daf19e4f79fa"
    }
  ],
  "bloqClass": "bloq-void-function-with-arguments",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-void-function-with-arguments-declare"
      },
      {
        "id": "FUNCNAME",
        "alias": "varInput",
        "placeholder": "bloq-functions-default"
      },
      {
        "alias": "text",
        "value": "bloq-void-function-with-arguments-count"
      },
      {
        "bloqInputId": "ARGS",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "argument",
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "4a676470-adfe-47b0-a9ab-daf19e4f79fa"
      }
    ]
  ],
  "createDynamicContent": "voidFunctions",
  "returnType": {
    "type": "simple",
    "value": "void"
  },
  "arguments": {
    "type": "fromInput",
    "bloqInputId": "ARGS"
  },
  "code": "void {FUNCNAME} ({ARGS}){{STATEMENTS}}",
  "arduino": {
    "code": "void {FUNCNAME} ({ARGS}){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"voidFunctionWithArguments\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "invokeFunction",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-invoke-function",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-invoke-function-exec"
      },
      {
        "id": "FUNCTION",
        "alias": "dynamicDropdown",
        "options": "voidFunctions"
      }
    ]
  ],
  "code": "{FUNCTION}();",
  "dynamicDropdown": {
    "idDropdown": "FUNCTION",
    "options": "voidFunctions"
  },
  "python": {
    "codeLines": [
      {
        "code": "{FUNCTION}()"
      }
    ]
  },
  "arduino": {
    "code": "{FUNCTION}();"
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "invokeReturnFunction",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-invoke-return-function",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-invoke-return-function-exec"
      },
      {
        "id": "FUNCTION",
        "alias": "dynamicDropdown",
        "options": "returnFunctions"
      }
    ]
  ],
  "code": "{FUNCTION}()",
  "returnType": {
    "type": "fromDynamicDropdown",
    "idDropdown": "FUNCTION",
    "options": "returnFunctions"
  },
  "python": {
    "codeLines": [
      {
        "code": "{FUNCTION}()"
      }
    ]
  },
  "arduino": {
    "code": "{FUNCTION}()"
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "returnFunction",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "selectVariable",
        "logicOperations",
        "equalityOperations"
      ],
      "name": "d35903c2-2441-43ac-935d-aecbe053ab3f"
    }
  ],
  "bloqClass": "bloq-return-function",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-return-function-declare"
      },
      {
        "id": "FUNCNAME",
        "alias": "varInput",
        "placeholder": "bloq-functions-default"
      },
      {
        "position": "DOWN",
        "alias": "text",
        "value": "bloq-return-function-return"
      },
      {
        "position": "DOWN",
        "bloqInputId": "RETURN",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "logicOperations",
          "equalityOperations"
        ],
        "name": "d35903c2-2441-43ac-935d-aecbe053ab3f"
      }
    ]
  ],
  "createDynamicContent": "returnFunctions",
  "returnType": {
    "type": "fromInput",
    "bloqInputId": "RETURN"
  },
  "code": "{RETURN.connectionType} {FUNCNAME} () {{STATEMENTS}return {RETURN};}",
  "python": {
    "codeLines": [
      {
        "code": "def {FUNCNAME}():"
      },
      {
        "indentation": 1,
        "code": "{STATEMENTS}"
      },
      {
        "indentation": 1,
        "code": "return {RETURN}"
      }
    ]
  },
  "arduino": {
    "code": "@{RETURN.returnType} {FUNCNAME} () {{STATEMENTS}return {RETURN};}"
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "voidFunction",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-void-function",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-void-function-declare"
      },
      {
        "id": "FUNCNAME",
        "alias": "varInput",
        "placeholder": "bloq-functions-default"
      }
    ]
  ],
  "createDynamicContent": "voidFunctions",
  "returnType": {
    "type": "simple",
    "value": "void"
  },
  "code": "void {FUNCNAME} (){{STATEMENTS}}",
  "python": {
    "codeLines": [
      {
        "code": "def {FUNCNAME}():"
      },
      {
        "indentation": 1,
        "code": "{STATEMENTS}"
      }
    ]
  },
  "arduino": {
    "code": "void {FUNCNAME} (){{STATEMENTS}}"
  }
});
db.bitbloq_Bloqs.insert({
  "name": "group",
  "type": "group",
  "connectors": [
    {
      "type": "connector--empty"
    },
    {
      "type": "connector--empty"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ]
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "boolArrayAdvanced",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "name": "d997fade-b01b-4f67-a42b-80742ff3900b"
    }
  ],
  "bloqClass": "bloq-boolArray-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-boolArray-advanced-arraySize"
      },
      {
        "bloqInputId": "VALUE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "name": "d997fade-b01b-4f67-a42b-80742ff3900b"
      },
      {
        "alias": "text",
        "value": "bloq-boolArray-advanced-boolType"
      }
    ]
  ],
  "code": "(bool *)malloc({VALUE}*sizeof(bool))",
  "returnType": {
    "type": "simple",
    "value": "bool *"
  },
  "arduino": {
    "code": "(bool *)malloc({VALUE}*sizeof(bool))"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"boolArrayAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "boolArray",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-boolArray",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-boolArray-arraySize"
      },
      {
        "id": "VALUE",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "bloq-boolArray-boolType"
      }
    ]
  ],
  "code": "(bool *)malloc({VALUE}*sizeof(bool))",
  "returnType": {
    "type": "simple",
    "value": "bool *"
  },
  "arduino": {
    "code": "(bool *)malloc({VALUE}*sizeof(bool))"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"boolArray\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "boolean",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-boolean",
  "content": [
    [
      {
        "id": "STATE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-boolean-true",
            "value": "true"
          },
          {
            "label": "bloq-boolean-false",
            "value": "false"
          }
        ]
      }
    ]
  ],
  "code": "{STATE}",
  "returnType": {
    "type": "simple",
    "value": "bool"
  },
  "arduino": {
    "code": "{STATE}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"boolean\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "equalityOperations",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string",
        "selectVariable",
        "readSensor"
      ],
      "name": "1cd5bda7-5619-44b1-a416-6cf70a7a4145"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string",
        "selectVariable",
        "readSensor"
      ],
      "name": "ddfb6782-d5f5-4563-8b5d-dafa34b9cbe0"
    }
  ],
  "bloqClass": "bloq-equality-operations",
  "content": [
    [
      {
        "bloqInputId": "ARG1",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "readSensor"
        ],
        "name": "1cd5bda7-5619-44b1-a416-6cf70a7a4145"
      },
      {
        "id": "OPERATOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "=",
            "value": "=="
          },
          {
            "label": "!=",
            "value": "!="
          },
          {
            "label": ">",
            "value": ">"
          },
          {
            "label": ">=",
            "value": ">="
          },
          {
            "label": "<",
            "value": "<"
          },
          {
            "label": "<=",
            "value": "<="
          }
        ]
      },
      {
        "bloqInputId": "ARG2",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "readSensor"
        ],
        "name": "ddfb6782-d5f5-4563-8b5d-dafa34b9cbe0"
      }
    ]
  ],
  "code": "({ARG1} {OPERATOR} {ARG2})",
  "arduino": {
    "code": "({ARG1} {OPERATOR} {ARG2})"
  },
  "returnType": {
    "type": "simple",
    "value": "bool"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"equalityOperations\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "logicOperations",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "selectVariable",
        "equalityOperations",
        "logicOperations"
      ],
      "name": "67dc0f25-e55e-423d-b0ef-c217c6526c1d"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "selectVariable",
        "equalityOperations",
        "logicOperations"
      ],
      "name": "2545eb4d-d59f-433b-870c-c4a11571630a"
    }
  ],
  "bloqClass": "bloq-logic-operations",
  "content": [
    [
      {
        "bloqInputId": "ARG1",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "equalityOperations",
          "logicOperations"
        ],
        "name": "67dc0f25-e55e-423d-b0ef-c217c6526c1d"
      },
      {
        "id": "OPERATOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-logic-operations-and",
            "value": "&&"
          },
          {
            "label": "bloq-logic-operations-or",
            "value": "||"
          }
        ]
      },
      {
        "bloqInputId": "ARG2",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "equalityOperations",
          "logicOperations"
        ],
        "name": "2545eb4d-d59f-433b-870c-c4a11571630a"
      }
    ]
  ],
  "code": "({ARG1} {OPERATOR} {ARG2})",
  "returnType": {
    "type": "simple",
    "value": "bool"
  },
  "arduino": {
    "code": "({ARG1} {OPERATOR} {ARG2})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"logicOperations\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "not",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "selectVariable"
      ],
      "name": "4343f307-c338-4d06-b821-0dfe188ccc00"
    }
  ],
  "bloqClass": "bloq-not",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-not-not"
      },
      {
        "bloqInputId": "CONDITION",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable"
        ],
        "name": "4343f307-c338-4d06-b821-0dfe188ccc00"
      }
    ]
  ],
  "code": "!{CONDITION}",
  "returnType": {
    "type": "simple",
    "value": "bool"
  },
  "arduino": {
    "code": "!{CONDITION}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"not\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "name": "loopBloq",
  "type": "group",
  "connectors": [
    {
      "type": "connector--empty"
    },
    {
      "type": "connector--empty"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-loop",
  "headerText": "bloq-loop-header",
  "descriptionText": "bloq-loop-description",
  "content": [],
  "code": "void loop(){{STATEMENTS}}",
  "arduino": {
    "code": "void loop(){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"loopBloq\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "name": "pythonBloq",
  "type": "group",
  "connectors": [
    {
      "type": "connector--empty"
    },
    {
      "type": "connector--empty"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-python",
  "headerText": "Python Code",
  "descriptionText": "Python code come here",
  "content": [],
  "python": {
    "codeLines": [
      {
        "code": "{STATEMENTS}"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "name": "setupBloq",
  "type": "group",
  "connectors": [
    {
      "type": "connector--empty"
    },
    {
      "type": "connector--empty"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-setup",
  "headerText": "bloq-setup-header",
  "descriptionText": "bloq-setup-description",
  "content": [],
  "code": "void setup(){{STATEMENTS}}",
  "arduino": {
    "code": "void setup(){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"setupBloq\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "name": "varsBloq",
  "type": "group",
  "connectors": [
    {
      "type": "connector--empty"
    },
    {
      "type": "connector--empty"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-vars",
  "headerText": "bloq-var-header",
  "descriptionText": "bloq-var-description",
  "content": [],
  "code": "{STATEMENTS}",
  "arduino": {
    "code": "{STATEMENTS}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"varsBloq\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "mapAdvanced",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "readSensor",
        "selectVariable"
      ],
      "name": "075b3242-294b-4db0-8278-8ad6815fc1cb"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "dfb2748b-7ef8-436a-a3bc-902809403a55"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "112be4f4-001b-49cf-96e8-2050aa0205c0"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "7a148eda-586a-456a-adcb-6d481fb62a15"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "4e8c5060-aa9e-46db-836f-e758a651955e"
    }
  ],
  "bloqClass": "bloq-map-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-map-advanced-map"
      },
      {
        "bloqInputId": "VAR",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "readSensor",
          "selectVariable"
        ],
        "name": "075b3242-294b-4db0-8278-8ad6815fc1cb"
      },
      {
        "alias": "text",
        "value": "bloq-map-advanced-value"
      },
      {
        "bloqInputId": "INITMIN",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "dfb2748b-7ef8-436a-a3bc-902809403a55"
      },
      {
        "alias": "text",
        "value": "-"
      },
      {
        "bloqInputId": "INITMAX",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "112be4f4-001b-49cf-96e8-2050aa0205c0"
      },
      {
        "alias": "text",
        "value": "bloq-map-advanced-and"
      },
      {
        "bloqInputId": "FINMIN",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "7a148eda-586a-456a-adcb-6d481fb62a15"
      },
      {
        "alias": "text",
        "value": "-"
      },
      {
        "bloqInputId": "FINMAX",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "4e8c5060-aa9e-46db-836f-e758a651955e"
      },
      {
        "alias": "text",
        "value": "]"
      }
    ]
  ],
  "code": "map({VAR},{INITMIN},{INITMAX},{FINMIN},{FINMAX})",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "code": "map({VAR},{INITMIN},{INITMAX},{FINMIN},{FINMAX})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mapAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "mathOperations",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "6eb28b2a-c254-4280-ab71-abe5d3d22eef"
    }
  ],
  "bloqClass": "bloq-math-operations",
  "content": [
    [
      {
        "id": "OPERATOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-math-operations-sqrt",
            "value": "sqrt"
          },
          {
            "label": "bloq-math-operations-abs",
            "value": "abs"
          },
          {
            "label": "ln",
            "value": "log"
          },
          {
            "label": "log10",
            "value": "log10"
          },
          {
            "label": "e^",
            "value": "exp"
          }
        ]
      },
      {
        "bloqInputId": "ARG",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "6eb28b2a-c254-4280-ab71-abe5d3d22eef"
      }
    ]
  ],
  "code": "{OPERATOR}({ARG})",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "code": "{OPERATOR}({ARG})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mathOperations\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "numberArrayAdvanced",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "7b9e0365-6506-4a3f-9890-099f915118a1"
    }
  ],
  "bloqClass": "bloq-numberArray-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-numberArray-advanced-arraySize"
      },
      {
        "bloqInputId": "VALUE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "7b9e0365-6506-4a3f-9890-099f915118a1"
      },
      {
        "alias": "text",
        "value": "bloq-numberArray-advanced-type"
      },
      {
        "id": "TYPE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-numberArray-advanced-float",
            "value": "float *"
          },
          {
            "label": "bloq-numberArray-advanced-int",
            "value": "int *"
          }
        ]
      }
    ]
  ],
  "code": "({TYPE})malloc({VALUE}*sizeof({TYPE}.withoutAsterisk))",
  "returnType": {
    "type": "fromDropdown",
    "idDropdown": "TYPE",
    "options": "softwareVars"
  },
  "arduino": {
    "code": "({TYPE})malloc({VALUE}*sizeof(¬{TYPE.withoutAsterisk}))"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"numberArrayAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "round-v1",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "42c8563e-5ff2-446b-90da-2ef34e251e40"
    }
  ],
  "bloqClass": "bloq-round",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-round-advanced-roundto"
      },
      {
        "id": "OPERATOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-round-advanced-floor",
            "value": "floor"
          },
          {
            "label": "bloq-round-advanced-ceil",
            "value": "ceil"
          },
          {
            "label": "bloq-round-advanced-round",
            "value": "round"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-round-advanced-thenumber"
      },
      {
        "bloqInputId": "VAR",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "42c8563e-5ff2-446b-90da-2ef34e251e40"
      }
    ]
  ],
  "code": "{OPERATOR}({VAR})",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "code": "{OPERATOR}({VAR})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"round-v1\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "basicOperations",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable",
        "basicOperations",
        "parenthesis"
      ],
      "name": "572023b9-2edc-41f7-a701-c373acd36c22"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable",
        "basicOperations",
        "parenthesis"
      ],
      "name": "ae4d6cc8-7ac7-47c9-867b-48ffb7fbbd19"
    }
  ],
  "bloqClass": "bloq-basic-operations",
  "content": [
    [
      {
        "bloqInputId": "ARG1",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable",
          "basicOperations",
          "parenthesis"
        ],
        "name": "572023b9-2edc-41f7-a701-c373acd36c22"
      },
      {
        "id": "OPERATOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "+",
            "value": "+"
          },
          {
            "label": "-",
            "value": "-"
          },
          {
            "label": "x",
            "value": "*"
          },
          {
            "label": "/",
            "value": "/"
          },
          {
            "label": "^",
            "value": "^"
          },
          {
            "label": "%",
            "value": "%"
          }
        ]
      },
      {
        "bloqInputId": "ARG2",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable",
          "basicOperations",
          "parenthesis"
        ],
        "name": "ae4d6cc8-7ac7-47c9-867b-48ffb7fbbd19"
      }
    ]
  ],
  "code": "'{OPERATOR}' === '^'? 'pow({ARG1},{ARG2})' : '({ARG1} {OPERATOR} {ARG2})'",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "python": {
    "codeLines": [
      {
        "conditional": {
          "aliasId": "OPERATOR",
          "code": {
            "+": "{ARG1} {OPERATOR} {ARG2}",
            "-": "{ARG1} {OPERATOR} {ARG2}",
            "*": "{ARG1} {OPERATOR} {ARG2}",
            "/": "{ARG1} {OPERATOR} {ARG2}",
            "^": "{ARG1} ** {ARG2}",
            "%": "{ARG1} {OPERATOR} {ARG2}"
          }
        }
      }
    ]
  },
  "arduino": {
    "conditional": {
      "aliasId": "OPERATOR",
      "code": {
        "+": "{ARG1} {OPERATOR} {ARG2}",
        "-": "{ARG1} {OPERATOR} {ARG2}",
        "*": "{ARG1} {OPERATOR} {ARG2}",
        "/": "{ARG1} {OPERATOR} {ARG2}",
        "^": "{ARG1} ** {ARG2}",
        "%": "{ARG1} {OPERATOR} {ARG2}"
      }
    }
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "map",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "readSensor",
        "selectVariable"
      ],
      "name": "4e2f1c3f-0c8a-489d-8cd5-1e541e200972"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "4d5ebb0b-812c-4005-820f-79f3db841fbc"
    }
  ],
  "bloqClass": "bloq-map",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-map-map"
      },
      {
        "bloqInputId": "VAR",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "readSensor",
          "selectVariable"
        ],
        "name": "4e2f1c3f-0c8a-489d-8cd5-1e541e200972"
      },
      {
        "alias": "text",
        "value": "bloq-map-value"
      },
      {
        "bloqInputId": "MAXVAL",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "4d5ebb0b-812c-4005-820f-79f3db841fbc"
      },
      {
        "alias": "text",
        "value": "]"
      }
    ]
  ],
  "code": "map({VAR},0,1023,0,{MAXVAL})",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "code": "map({VAR},0,1023,0,{MAXVAL})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"map\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "number",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-number",
  "content": [
    [
      {
        "id": "VALUE",
        "alias": "numberInput",
        "value": 0
      }
    ]
  ],
  "code": "{VALUE}",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "code": "{VALUE}"
  },
  "python": {
    "codeLines": [
      {
        "code": "{VALUE}"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "numberArray",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-numberArray",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-numberArray-arraySize"
      },
      {
        "id": "VALUE",
        "alias": "numberInput",
        "value": 3
      },
      {
        "alias": "text",
        "value": "bloq-numberArray-floatType"
      }
    ]
  ],
  "code": "(float*)malloc({VALUE}*sizeof(float))",
  "returnType": {
    "type": "simple",
    "value": "float *"
  },
  "arduino": {
    "code": "(float*)malloc({VALUE}*sizeof(float))"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"numberArray\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "parenthesis",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "basicOperations"
      ],
      "name": "d674e0ca-276f-49cb-bef7-cca9776b8149"
    }
  ],
  "bloqClass": "bloq-parenthesis",
  "content": [
    [
      {
        "alias": "text",
        "value": "("
      },
      {
        "bloqInputId": "OPERATION",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "basicOperations"
        ],
        "name": "d674e0ca-276f-49cb-bef7-cca9776b8149"
      },
      {
        "alias": "text",
        "value": ")"
      }
    ]
  ],
  "code": "",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "code": "({OPERATION})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"parenthesis\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "random",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "81973a74-1591-423c-9ba2-3ca84012e302"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "0f56754a-94b1-48e1-a2b8-3d20e05a9107"
    }
  ],
  "bloqClass": "bloq-random",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-random-random"
      },
      {
        "bloqInputId": "ARG1",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "81973a74-1591-423c-9ba2-3ca84012e302"
      },
      {
        "alias": "text",
        "value": "bloq-random-and"
      },
      {
        "bloqInputId": "ARG2",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "0f56754a-94b1-48e1-a2b8-3d20e05a9107"
      }
    ]
  ],
  "code": "random({ARG1},{ARG2}+1)",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "code": "random({ARG1},{ARG2}+1)"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"random\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "randomSeed",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-random-seed",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-random-seed"
      }
    ]
  ],
  "code": "randomSeed(micros());",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "code": "randomSeed(micros());"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"randomSeed\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotRGBLedOff",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-rgbLedsimple-off",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-turnoffled-off"
      },
      {
        "id": "LED",
        "alias": "dynamicDropdown",
        "options": "mkb_integrated_RGB"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "code": "robot.setLed(º[{LED}.pin.s],0,0,0);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotRGBLedOff\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotBuzzerAdvanced-v2",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "32c2c817-2964-4fa4-8bd8-32f3e84e4d13"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "04cf3888-28e8-47c8-8e46-abcaefecb9f5"
    }
  ],
  "bloqClass": "bloq-mbot-buzzer-v2",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-buzzer-sound"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-note"
      },
      {
        "bloqInputId": "NOTE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "32c2c817-2964-4fa4-8bd8-32f3e84e4d13"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-for"
      },
      {
        "bloqInputId": "SECONDS",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "04cf3888-28e8-47c8-8e46-abcaefecb9f5"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-ms"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "code": "robot.playTone({NOTE},{SECONDS});\ndelay({SECONDS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotBuzzerAdvanced-v2\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotMoveAdvanced-v2",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "5a53db87-f007-459d-b8a1-263edd310c2a"
    }
  ],
  "bloqClass": "bloq-mbot-move",
  "content": [
    [
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-mbot-move-forward",
            "value": "1"
          },
          {
            "label": "bloq-mbot-move-backward",
            "value": "2"
          },
          {
            "label": "bloq-mbot-move-turnright",
            "value": "3"
          },
          {
            "label": "bloq-mbot-move-turnleft",
            "value": "4"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-mbot-move-speed"
      },
      {
        "bloqInputId": "SPEED",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "5a53db87-f007-459d-b8a1-263edd310c2a"
      },
      {
        "alias": "text",
        "value": "(0-255)"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "code": "robot.move({MOVEMENT},{SPEED});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotMoveAdvanced-v2\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotSetRGBLedAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "c7b948d7-e525-49c7-8c36-801bd7fc7bb4"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "3fba911a-b000-42c6-835f-b6ead295bd27"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "731f0cb9-c511-4343-8694-7fcdf07c953e"
    }
  ],
  "bloqClass": "bloq-mbot-setrgbLed",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-setled-set"
      },
      {
        "id": "LED",
        "alias": "dynamicDropdown",
        "options": "mkb_integrated_RGB"
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-red"
      },
      {
        "bloqInputId": "RED",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "c7b948d7-e525-49c7-8c36-801bd7fc7bb4"
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-green"
      },
      {
        "bloqInputId": "GREEN",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "3fba911a-b000-42c6-835f-b6ead295bd27"
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-blue"
      },
      {
        "bloqInputId": "BLUE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "731f0cb9-c511-4343-8694-7fcdf07c953e"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "code": "robot.setLed(º[{LED}.pin.s],{RED}, {GREEN}, {BLUE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotSetRGBLedAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotBuzzer-v2",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-buzzer-v2",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-buzzer-sound"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-note"
      },
      {
        "id": "NOTE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-buzzer-do",
            "value": "261"
          },
          {
            "label": "bloq-buzzer-re",
            "value": "293"
          },
          {
            "label": "bloq-buzzer-mi",
            "value": "329"
          },
          {
            "label": "bloq-buzzer-fa",
            "value": "349"
          },
          {
            "label": "bloq-buzzer-sol",
            "value": "392"
          },
          {
            "label": "bloq-buzzer-la",
            "value": "440"
          },
          {
            "label": "bloq-buzzer-si",
            "value": "494"
          },
          {
            "label": "bloq-buzzer-do-#",
            "value": "277"
          },
          {
            "label": "bloq-buzzer-re-#",
            "value": "311"
          },
          {
            "label": "bloq-buzzer-fa-#",
            "value": "370"
          },
          {
            "label": "bloq-buzzer-sol-#",
            "value": "415"
          },
          {
            "label": "bloq-buzzer-la-#",
            "value": "466"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-for"
      },
      {
        "id": "SECONDS",
        "alias": "numberInput",
        "value": 2000
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-ms"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "code": "robot.playTone({NOTE},{SECONDS});\ndelay({SECONDS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotBuzzer-v2\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "mBotGetDistance-v2",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-mbot-getdistance-v2",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-getdistance"
      },
      {
        "id": "ULTRASOUND",
        "alias": "dynamicDropdown",
        "options": "mkb_ultrasound"
      },
      {
        "alias": "text",
        "value": "in"
      },
      {
        "id": "MAGNITUDE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "cm",
            "value": "cm"
          },
          {
            "label": "inches",
            "value": "inches"
          }
        ]
      }
    ]
  ],
  "code": "",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "conditional": {
      "aliasId": "MAGNITUDE",
      "code": {
        "cm": "{ULTRASOUND}.readDistanceInCM()",
        "inches": "{ULTRASOUND}.readDistanceInInches()"
      }
    }
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotGetDistance-v2\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "mBotIfFollowLines",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "all",
        "ifDown"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-iffollowlines",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-iffollowlines-if"
      },
      {
        "id": "LINELEFT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "white",
            "value": 1
          },
          {
            "label": "black",
            "value": 0
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-mbot-iffollowlines-and"
      },
      {
        "id": "LINERIGHT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "white",
            "value": 1
          },
          {
            "label": "black",
            "value": 0
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-mbot-iffollowlines-withsensor"
      },
      {
        "id": "LINEFOLLOWER",
        "alias": "dynamicDropdown",
        "options": "mkb_linefollower"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "code": "if((digitalRead({LINEFOLLOWER}_1) == {LINELEFT}) && (digitalRead({LINEFOLLOWER}_2) == {LINERIGHT})){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotIfFollowLines\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "mBotIfThereIsALotOfLight",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "all",
        "ifDown"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-ifthereisalotoflight",
  "content": [
    [
      {
        "alias": "text",
        "value": "if"
      },
      {
        "id": "OPERATION",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-mbot-ifthereisalotoflight-alot",
            "value": "+"
          },
          {
            "label": "bloq-mbot-ifthereisalotoflight-low",
            "value": "-"
          },
          {
            "label": "bloq-mbot-ifthereisalotoflight-operation-nodetect",
            "value": "*"
          }
        ]
      },
      {
        "alias": "text",
        "value": "with-the"
      },
      {
        "id": "LIGHTSENSOR",
        "alias": "dynamicDropdown",
        "options": "mkb_lightsensor"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "conditional": {
      "aliasId": "OPERATION",
      "code": {
        "+": "if(¬{LIGHTSENSOR.readSensor} > 200){{STATEMENTS}}",
        "-": "if((¬{LIGHTSENSOR.readSensor} > 0) && (¬{LIGHTSENSOR.readSensor} <= 200)){{STATEMENTS}}",
        "*": "if(¬{LIGHTSENSOR.readSensor} <= 0){{STATEMENTS}}"
      }
    }
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotIfThereIsALotOfLight\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotShowPrintText",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-printtext",
  "content": [
    [
      {
        "alias": "text",
        "value": "Escribir"
      },
      {
        "id": "TEXT",
        "alias": "stringInput",
        "defaultValue": "Hola"
      },
      {
        "alias": "text",
        "value": "en la pantalla conectada en el "
      },
      {
        "id": "PORT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "puerto 1",
            "value": "1"
          },
          {
            "label": "puerto 2",
            "value": "2"
          },
          {
            "label": "puerto 3",
            "value": "3"
          },
          {
            "label": "puerto 4",
            "value": "4"
          }
        ]
      },
      {
        "alias": "text",
        "value": "empezando en la posición (columna, fila)"
      },
      {
        "id": "COLUMN",
        "alias": "numberInput",
        "value": 0
      },
      {
        "id": "ROW",
        "alias": "numberInput",
        "value": 0
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "mBot.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBot",
        "type": "MBot"
      }
    ],
    "code": "mBot.print({PORT}, {TEXT}, {COLUMN}, {ROW});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotShowPrintText\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotSetMotor",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-setmotor",
  "content": [
    [
      {
        "alias": "text",
        "value": "Fijar el motor "
      },
      {
        "id": "MOTOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "M1",
            "value": "M1"
          },
          {
            "label": "M2",
            "value": "M2"
          }
        ]
      },
      {
        "alias": "text",
        "value": "a una velocidad"
      },
      {
        "id": "SPEED",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "muy muy rápida",
            "value": "255"
          },
          {
            "label": "muy rápida",
            "value": "100"
          },
          {
            "label": "rápida",
            "value": "50"
          },
          {
            "label": "nula",
            "value": "0"
          },
          {
            "label": "despacio",
            "value": "-50"
          },
          {
            "label": "muy despacio",
            "value": "-100"
          },
          {
            "label": "muy muy despacio",
            "value": "-255"
          }
        ]
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "mBot.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBot",
        "type": "MBot"
      }
    ],
    "code": "mBot.setMotor({MOTOR},{SPEED});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotSetMotor\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotSetServo",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-setservo",
  "content": [
    [
      {
        "alias": "text",
        "value": "Fijar el servo en el"
      },
      {
        "id": "PORT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "puerto 1",
            "value": "1"
          },
          {
            "label": "puerto 2",
            "value": "2"
          },
          {
            "label": "puerto 3",
            "value": "3"
          },
          {
            "label": "puerto 4",
            "value": "4"
          }
        ]
      },
      {
        "alias": "text",
        "value": "y el"
      },
      {
        "id": "BANK",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "banco 1",
            "value": "1"
          },
          {
            "label": "banco 2",
            "value": "2"
          }
        ]
      },
      {
        "alias": "text",
        "value": "con un ángulo de "
      },
      {
        "id": "ANGLE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "0",
            "value": "0"
          },
          {
            "label": "45",
            "value": "45"
          },
          {
            "label": "90",
            "value": "90"
          },
          {
            "label": "135",
            "value": "135"
          },
          {
            "label": "180",
            "value": "180"
          }
        ]
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "mBot.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBot",
        "type": "MBot"
      }
    ],
    "code": "mBot.setServo({PORT}, {BANK}, {ANGLE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotSetServo\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotShowFaceByNumber",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-showfacebynumber",
  "content": [
    [
      {
        "alias": "text",
        "value": "Mostrar la cara número "
      },
      {
        "id": "FACE",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "en la pantalla conectada en el "
      },
      {
        "id": "PORT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "puerto 1",
            "value": "1"
          },
          {
            "label": "puerto 2",
            "value": "2"
          },
          {
            "label": "puerto 3",
            "value": "3"
          },
          {
            "label": "puerto 4",
            "value": "4"
          }
        ]
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "mBot.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBot",
        "type": "MBot"
      }
    ],
    "code": "mBot.showFaceByNumber({PORT},{FACE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotShowFaceByNumber\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotMove-v2",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-move",
  "content": [
    [
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-mbot-move-forward",
            "value": "1"
          },
          {
            "label": "bloq-mbot-move-backward",
            "value": "2"
          },
          {
            "label": "bloq-mbot-move-turnright",
            "value": "3"
          },
          {
            "label": "bloq-mbot-move-turnleft",
            "value": "4"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-mbot-move-speed"
      },
      {
        "id": "SPEED",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-mbot-move-speed-fast",
            "value": "210"
          },
          {
            "label": "bloq-mbot-move-speed-normal",
            "value": "160"
          },
          {
            "label": "bloq-mbot-move-speed-slow",
            "value": "100"
          }
        ]
      }
    ]
  ],
  "code": "",
  "arduino": {
    "code": "robot.move({MOVEMENT},{SPEED});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotMove-v2\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotSetRGBLed",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-setrgbLed",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-setled-set"
      },
      {
        "id": "LED",
        "alias": "dynamicDropdown",
        "options": "mkb_integrated_RGB"
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-red"
      },
      {
        "id": "RED",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-green"
      },
      {
        "id": "GREEN",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-blue"
      },
      {
        "id": "BLUE",
        "alias": "numberInput",
        "value": 0
      }
    ]
  ],
  "code": "",
  "arduino": {
    "code": "robot.setLed(º[{LED}.pin.s],{RED}, {GREEN}, {BLUE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotSetRGBLed\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotSetRGBLedSimple",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-setrgbLed-simple",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-setled-set"
      },
      {
        "id": "LED",
        "alias": "dynamicDropdown",
        "options": "mkb_integrated_RGB"
      },
      {
        "alias": "text",
        "value": "bloq-rgbLed-simple-color"
      },
      {
        "id": "COLOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-rgbLed-simple-white",
            "value": "255,255,255"
          },
          {
            "label": "bloq-rgbLed-simple-yellow",
            "value": "255,255,0"
          },
          {
            "label": "bloq-rgbLed-simple-orange",
            "value": "200,50,0"
          },
          {
            "label": "bloq-rgbLed-simple-red",
            "value": "255,0,0"
          },
          {
            "label": "bloq-rgbLed-simple-green",
            "value": "0,255,0"
          },
          {
            "label": "bloq-rgbLed-simple-dark-green",
            "value": "0,61,4"
          },
          {
            "label": "bloq-rgbLed-simple-blue",
            "value": "40,40,255"
          },
          {
            "label": "bloq-rgbLed-simple-dark-blue",
            "value": "0,0,255"
          },
          {
            "label": "bloq-rgbLed-simple-pink",
            "value": "255,0,255"
          }
        ]
      }
    ]
  ],
  "code": "",
  "arduino": {
    "code": "robot.setLed(º[{LED}.pin.s],{COLOR});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotSetRGBLedSimple\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "mBotSomethingNear",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "all",
        "ifDown"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-somethingnear",
  "content": [
    [
      {
        "alias": "text",
        "value": "if"
      },
      {
        "id": "OPERATION",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-mbot-somethingnear-operation-near",
            "value": "{ULTRASOUND}.readDistanceInCM() < 8"
          },
          {
            "label": "bloq-mbot-somethingnear-operation-faraway",
            "value": "({ULTRASOUND}.readDistanceInCM() >= 8) && ({ULTRASOUND}.readDistanceInCM() < 513)"
          },
          {
            "label": "bloq-mbot-somethingnear-operation-nodetect",
            "value": "{ULTRASOUND}.readDistanceInCM() >= 513"
          }
        ]
      },
      {
        "alias": "text",
        "value": "with-the"
      },
      {
        "id": "ULTRASOUND",
        "alias": "dynamicDropdown",
        "options": "mkb_ultrasound"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "code": "if({OPERATION}){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotSomethingNear\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotStop-v2",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-stop",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-stop"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "code": "robot.move(1,0);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotStop-v2\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotBuzzerAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "15bb3689-4a99-4ac1-b511-19df86f8939c"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "15f1ad17-4acb-46a8-a5d3-10aeacf80c4f"
    }
  ],
  "bloqClass": "bloq-mbot-buzzer",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-buzzer-advanced-play"
      },
      {
        "bloqInputId": "NOTE",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "15bb3689-4a99-4ac1-b511-19df86f8939c"
      },
      {
        "alias": "text",
        "value": "bloq-mbot-buzzer-advanced-for"
      },
      {
        "bloqInputId": "SECONDS",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "15f1ad17-4acb-46a8-a5d3-10aeacf80c4f"
      },
      {
        "alias": "text",
        "value": "bloq-mbot-buzzer-advanced-ms"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "needInstanceOf": [
      {
        "name": "mBotBuzzerPin",
        "type": "const int",
        "equals": "8"
      }
    ],
    "code": "tone(mBotBuzzerPin,{NOTE},{SECONDS});\ndelay({SECONDS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotBuzzerAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotMoveAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "eecb5f28-86ac-4044-9ad9-25f42eee63bc"
    }
  ],
  "bloqClass": "bloq-mbot-move",
  "content": [
    [
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-mbot-move-forward",
            "value": "1"
          },
          {
            "label": "bloq-mbot-move-backward",
            "value": "2"
          },
          {
            "label": "bloq-mbot-move-turnright",
            "value": "3"
          },
          {
            "label": "bloq-mbot-move-turnleft",
            "value": "4"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-mbot-move-advanced-speed"
      },
      {
        "bloqInputId": "SPEED",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "eecb5f28-86ac-4044-9ad9-25f42eee63bc"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "BitbloqMBotDeprecated.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBotv1",
        "type": "MBot"
      }
    ],
    "code": "mBotv1.move({MOVEMENT},{SPEED});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotMoveAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotSetLedAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "afc4e5b1-341d-47e9-aa4d-3d1afe90ef7c"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "d61c6966-7148-4c76-a153-75677d7e858c"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "fb7d29b0-d492-48d3-b128-69aedf6137fd"
    }
  ],
  "bloqClass": "bloq-mbot-setled",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-setled-advanced-set"
      },
      {
        "id": "LEDS",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-mbot-led-all",
            "value": "0"
          },
          {
            "label": "bloq-mbot-led-right",
            "value": "1"
          },
          {
            "label": "bloq-mbot-led-left",
            "value": "2"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-mbot-setled-advanced-colormix"
      },
      {
        "alias": "text",
        "value": "bloq-mbot-setled-advanced-red"
      },
      {
        "bloqInputId": "RED",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "afc4e5b1-341d-47e9-aa4d-3d1afe90ef7c"
      },
      {
        "alias": "text",
        "value": "bloq-mbot-setled-advanced-green"
      },
      {
        "bloqInputId": "GREEN",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "d61c6966-7148-4c76-a153-75677d7e858c"
      },
      {
        "alias": "text",
        "value": "bloq-mbot-setled-advanced-blue"
      },
      {
        "bloqInputId": "BLUE",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "fb7d29b0-d492-48d3-b128-69aedf6137fd"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "BitbloqMBotDeprecated.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBotv1",
        "type": "MBot"
      }
    ],
    "code": "mBotv1.setLed({LEDS}, {RED}, {GREEN}, {BLUE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotSetLedAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotBuzzer",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-buzzer",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-buzzer-note"
      },
      {
        "id": "NOTE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-buzzer-do",
            "value": "261"
          },
          {
            "label": "bloq-buzzer-re",
            "value": "293"
          },
          {
            "label": "bloq-buzzer-mi",
            "value": "329"
          },
          {
            "label": "bloq-buzzer-fa",
            "value": "349"
          },
          {
            "label": "bloq-buzzer-sol",
            "value": "392"
          },
          {
            "label": "bloq-buzzer-la",
            "value": "440"
          },
          {
            "label": "bloq-buzzer-si",
            "value": "494"
          },
          {
            "label": "bloq-buzzer-do-#",
            "value": "277"
          },
          {
            "label": "bloq-buzzer-re-#",
            "value": "311"
          },
          {
            "label": "bloq-buzzer-fa-#",
            "value": "370"
          },
          {
            "label": "bloq-buzzer-sol-#",
            "value": "415"
          },
          {
            "label": "bloq-buzzer-la-#",
            "value": "466"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-mbot-buzzer-for"
      },
      {
        "id": "SECONDS",
        "alias": "numberInput",
        "value": 2000
      },
      {
        "alias": "text",
        "value": "bloq-mbot-buzzer-ms"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "needInstanceOf": [
      {
        "name": "mBotBuzzerPin",
        "type": "const int",
        "equals": "8"
      }
    ],
    "code": "tone(mBotBuzzerPin,{NOTE},{SECONDS});\ndelay({SECONDS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotBuzzer\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "mBotGetDistance",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-mbot-getdistance",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-getdistance-get"
      },
      {
        "id": "PORT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-mbot-port-1",
            "value": "1"
          },
          {
            "label": "bloq-mbot-port-2",
            "value": "2"
          },
          {
            "label": "bloq-mbot-port-3",
            "value": "3"
          },
          {
            "label": "bloq-mbot-port-4",
            "value": "4"
          }
        ]
      }
    ]
  ],
  "code": "",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "includes": [
      "BitbloqMBotDeprecated.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBotv1",
        "type": "MBot"
      }
    ],
    "code": "mBotv1.getDistance({PORT})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotGetDistance\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "mBotGetButtonStatus",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-mbot-getbuttonstatus",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-getbuttonstatus"
      }
    ]
  ],
  "code": "",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "includes": [
      "BitbloqMBotDeprecated.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBotv1",
        "type": "MBot"
      }
    ],
    "code": "mBotv1.getButtonStatus()"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotGetButtonStatus\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "mBotGetLightSensor",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-mbot-getlightsensor",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-getlightsensor"
      }
    ]
  ],
  "code": "",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "includes": [
      "BitbloqMBotDeprecated.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBotv1",
        "type": "MBot"
      }
    ],
    "code": "mBotv1.getLightSensor()"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotGetLightSensor\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "mBotLineFollower",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-mbot-linefollower",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-linefollower-text"
      },
      {
        "id": "PORT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-mbot-port-1",
            "value": "1"
          },
          {
            "label": "bloq-mbot-port-2",
            "value": "2"
          },
          {
            "label": "bloq-mbot-port-3",
            "value": "3"
          },
          {
            "label": "bloq-mbot-port-4",
            "value": "4"
          }
        ]
      }
    ]
  ],
  "code": "",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "includes": [
      "BitbloqMBotDeprecated.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBotv1",
        "type": "MBot"
      }
    ],
    "code": "mBotv1.getLineFollower({PORT})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotLineFollower\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotMove",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-move",
  "content": [
    [
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-mbot-move-forward",
            "value": "1"
          },
          {
            "label": "bloq-mbot-move-backward",
            "value": "2"
          },
          {
            "label": "bloq-mbot-move-turnright",
            "value": "3"
          },
          {
            "label": "bloq-mbot-move-turnleft",
            "value": "4"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-mbot-move-speed"
      },
      {
        "id": "SPEED",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-mbot-move-speed-fast",
            "value": "255"
          },
          {
            "label": "bloq-mbot-move-speed-normal",
            "value": "100"
          },
          {
            "label": "bloq-mbot-move-speed-slow",
            "value": "50"
          }
        ]
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "BitbloqMBotDeprecated.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBotv1",
        "type": "MBot"
      }
    ],
    "code": "mBotv1.move({MOVEMENT},{SPEED});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotMove\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotSetLed",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-setled",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-setled-set"
      },
      {
        "id": "LEDS",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-mbot-led-all",
            "value": "0"
          },
          {
            "label": "bloq-mbot-led-right",
            "value": "1"
          },
          {
            "label": "bloq-mbot-led-left",
            "value": "2"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-mbot-setled-colormix"
      },
      {
        "alias": "text",
        "value": "bloq-mbot-setled-red"
      },
      {
        "id": "RED",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "bloq-mbot-setled-green"
      },
      {
        "id": "GREEN",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "bloq-mbot-setled-blue"
      },
      {
        "id": "BLUE",
        "alias": "numberInput",
        "value": 0
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "BitbloqMBotDeprecated.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBotv1",
        "type": "MBot"
      }
    ],
    "code": "mBotv1.setLed({LEDS}, {RED}, {GREEN}, {BLUE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotSetLed\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotStop",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-stop",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-stop"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "BitbloqMBotDeprecated.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBotv1",
        "type": "MBot"
      }
    ],
    "code": "mBotv1.move(1,0);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotStop\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "mBotTurnOffLed",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-mbot-turnoffled",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-mbot-turnoffled-off"
      },
      {
        "id": "LEDS",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-mbot-led-all",
            "value": "0"
          },
          {
            "label": "bloq-mbot-led-right",
            "value": "1"
          },
          {
            "label": "bloq-mbot-led-left",
            "value": "2"
          }
        ]
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "BitbloqMBotDeprecated.h"
    ],
    "needInstanceOf": [
      {
        "name": "mBotv1",
        "type": "MBot"
      }
    ],
    "code": "mBotv1.setLed({LEDS}, 0, 0, 0);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"mBotTurnOffLed\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "output",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ]
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "phoneConfigTwitter",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-twitter-config",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-twitter-config"
      }
    ]
  ],
  "code": "/*sendTwitterAppConfig*/",
  "arduino": {
    "code": "/*sendTwitterAppConfig*/"
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "phoneEmitSound",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-phone-sound",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-phone-sounds"
      },
      {
        "id": "SOUND",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-phone-sounds-bass-v1",
            "value": "\"bass\""
          },
          {
            "label": "bloq-phone-sounds-bongo-v1",
            "value": "\"bongo\""
          },
          {
            "label": "bloq-phone-sounds-highhat-v1",
            "value": "\"highhat\""
          },
          {
            "label": "bloq-phone-sounds-snare-v1",
            "value": "\"snare\""
          },
          {
            "label": "bloq-phone-sounds-meow-v1",
            "value": "\"meow\""
          },
          {
            "label": "bloq-phone-sounds-joke-v1",
            "value": "\"joke\""
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-phone-sounds-device"
      },
      {
        "id": "PHONE",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      }
    ]
  ],
  "code": "{PHONE}.println(\"playSound-\" + {SOUND});delay(1000);",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "code": "{PHONE}.println(String(\"playSound-\")+String({SOUND}));delay(1000);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"phoneEmitSound\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "phoneReadAccel",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-phone-read-accel",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-read-read"
      },
      {
        "id": "MESSAGE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-phone-acceleration",
            "value": "\"readAccel-\""
          },
          {
            "label": "bloq-phone-lacceleration",
            "value": "\"readLAccel-\""
          },
          {
            "label": "bloq-phone-gravity",
            "value": "\"readGravity-\""
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-phone-axis"
      },
      {
        "id": "AXIS",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "x",
            "value": "\"x\""
          },
          {
            "label": "y",
            "value": "\"y\""
          },
          {
            "label": "z",
            "value": "\"z\""
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-phone-of"
      },
      {
        "id": "PHONE",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      },
      {
        "alias": "text",
        "value": "(m/s²)"
      }
    ]
  ],
  "code": "{PHONE}.readString()",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "extraFunctionCode": "float getAcceleration(String axis, String message, bqSoftwareSerial & phone){phone.println(String(message)+String(axis));String data=\"\";while(data==\"\"){data=phone.readString();}return data.toFloat();}",
    "code": "getAcceleration({AXIS}, {MESSAGE}, {PHONE})"
  },
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"phoneReadAccel\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "phoneReadGyroscope",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-phone-read-gyros",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-phone-gyroscope"
      },
      {
        "id": "AXIS",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "x",
            "value": "\"x\""
          },
          {
            "label": "y",
            "value": "\"y\""
          },
          {
            "label": "z",
            "value": "\"z\""
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-phone-of"
      },
      {
        "id": "PHONE",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      },
      {
        "alias": "text",
        "value": "(rad/s)"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "extraFunctionCode": "float getGyroscope(String axis,bqSoftwareSerial & phone){phone.println(String(\"readGyros-\")+String(axis));String data=\"\";while(data==\"\"){data=phone.readString();}return data.toFloat();}",
    "code": "getGyroscope({AXIS}, {PHONE})"
  },
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"phoneReadGyroscope\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "phoneReadLight",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-phone-read-light",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-phone-light"
      },
      {
        "id": "PHONE",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      },
      {
        "alias": "text",
        "value": "(lx)"
      }
    ]
  ],
  "code": "{PHONE}.readString()",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "extraFunctionCode": "float getLight(bqSoftwareSerial & phone){phone.println(String(\"readLight-\"));String data=\"\";while(data==\"\"){data=phone.readString();}return data.toFloat();}",
    "code": "getLight({PHONE})"
  },
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"phoneReadLight\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "phoneReadMagnetic",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-phone-read-magnetic",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-phone-magnetic"
      },
      {
        "id": "AXIS",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "x",
            "value": "\"x\""
          },
          {
            "label": "y",
            "value": "\"y\""
          },
          {
            "label": "z",
            "value": "\"z\""
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-phone-of"
      },
      {
        "id": "PHONE",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      },
      {
        "alias": "text",
        "value": "(μT)"
      }
    ]
  ],
  "code": "{PHONE}.readString()",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "extraFunctionCode": "float getMagneticField(String axis,bqSoftwareSerial & phone){phone.println(String(\"readMagnetic-\")+String(axis));String data=\"\";while(data==\"\"){data=phone.readString();}return data.toFloat();}",
    "code": "getMagneticField({AXIS}, {PHONE})"
  },
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"phoneReadMagnetic\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "phoneReadOrientation",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-phone-read-orientation",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-value"
      },
      {
        "id": "AXIS",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-phone-orientation-azimuth",
            "value": "\"azimuth\""
          },
          {
            "label": "bloq-phone-orientation-roll",
            "value": "\"roll\""
          },
          {
            "label": "bloq-phone-orientation-pitch",
            "value": "\"pitch\""
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-phone-of"
      },
      {
        "id": "PHONE",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      },
      {
        "alias": "text",
        "value": "(º)"
      }
    ]
  ],
  "code": "{PHONE}.readString()",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "extraFunctionCode": "float getOrientation(String axis,bqSoftwareSerial & phone){phone.println(String(\"readOrientation-\")+String(axis));String data=\"\";while(data==\"\"){data=phone.readString();}return data.toFloat();}",
    "code": "getOrientation({AXIS}, {PHONE})"
  },
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"phoneReadOrientation\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "phoneReceive",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-phone-receive",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-phone-receive"
      },
      {
        "id": "PHONE",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      }
    ]
  ],
  "code": "{PHONE}.readString()",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "code": "{PHONE}.readString()"
  },
  "returnType": {
    "type": "simple",
    "value": "String"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"phoneReceive\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "phoneSendText",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "string",
        "number",
        "selectVariable"
      ],
      "name": "38db0770-2a06-44d7-8c94-e82e2e6aeab5"
    }
  ],
  "bloqClass": "bloq-phone-write",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-phone-write-show"
      },
      {
        "bloqInputId": "DATA",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "number",
          "selectVariable"
        ],
        "name": "38db0770-2a06-44d7-8c94-e82e2e6aeab5"
      },
      {
        "alias": "text",
        "value": "bloq-phone-screen"
      },
      {
        "id": "PHONE",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      }
    ]
  ],
  "code": "{PHONE}.println(\"write-\" + {DATA});",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "code": "{PHONE}.println(String(\"write-\")+String({DATA}));"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"phoneSendText\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "phoneSendTweet",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "string",
        "selectVariable"
      ],
      "name": "d7fd71c9-01a5-45c0-af9f-0f91bcb235d6"
    }
  ],
  "bloqClass": "bloq-send-tweet",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-send-tweet"
      },
      {
        "bloqInputId": "TWEET",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "selectVariable"
        ],
        "name": "d7fd71c9-01a5-45c0-af9f-0f91bcb235d6"
      },
      {
        "alias": "text",
        "value": "bloq-from-device"
      },
      {
        "id": "PHONE",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      }
    ]
  ],
  "code": "{PHONE}.println(\"twitterSend-\" + {TWEET});",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "code": "{PHONE}.println(String(\"twitterSend-\")+String({TWEET}));"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"phoneSendTweet\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "phoneTurnOffLight",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-phone-turnoff-light",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-phone-turnoff-light"
      },
      {
        "id": "PHONE",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      }
    ]
  ],
  "code": "{PHONE}.println(\"turnoffFlashlight-\"); delay(500);",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "code": "{PHONE}.println(String(\"turnoffFlashlight-\")); delay(500);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"phoneTurnOffLight\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "phoneTurnOnLight",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-phone-turnon-light",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-phone-turnon-light"
      },
      {
        "id": "PHONE",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      }
    ]
  ],
  "code": "{PHONE}.println(\"turnonFlashlight-\");  delay(500);",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "code": "{PHONE}.println(String(\"turnonFlashlight-\"));  delay(500);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"phoneTurnOnLight\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "phoneisCovered",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-phone-isCovered",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-the"
      },
      {
        "id": "PHONE",
        "alias": "dynamicDropdown",
        "options": "serialElements"
      },
      {
        "alias": "text",
        "value": "bloq-phone-is"
      },
      {
        "id": "COVERED",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-phone-covered",
            "value": "\"covered\""
          },
          {
            "label": "bloq-phone-not-covered",
            "value": "\"ncovered\""
          }
        ]
      }
    ]
  ],
  "code": "{PHONE}.readString()",
  "arduino": {
    "includes": [
      "BitbloqSoftwareSerial.h"
    ],
    "extraFunctionCode": "boolean getProx(String cv,bqSoftwareSerial & phone){phone.println(String(\"readProx-\")+String(cv));String data=\"\";boolean result=false;while(data==\"\"){data=phone.readString();}if(data.indexOf(\"true\")>=0){result=true;}else{result=false;}return result;}",
    "code": "getProx({COVERED}, {PHONE})"
  },
  "returnType": {
    "type": "simple",
    "value": "boolean"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"phoneisCovered\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "statement",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ]
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "statement-input",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ]
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "char",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-string",
  "content": [
    [
      {
        "alias": "text",
        "value": "'"
      },
      {
        "id": "TEXT",
        "alias": "charInput",
        "placeholder": "bloq-char"
      },
      {
        "alias": "text",
        "value": "'"
      }
    ]
  ],
  "code": "'{TEXT}'",
  "returnType": {
    "type": "simple",
    "value": "char"
  },
  "arduino": {
    "code": "'{TEXT}'"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"char\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "stringArrayAdvanced",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "261d313f-5540-4fe2-b801-501b1209cc98"
    }
  ],
  "bloqClass": "bloq-stringArray-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-stringArray-advanced-arraySize"
      },
      {
        "bloqInputId": "VALUE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "261d313f-5540-4fe2-b801-501b1209cc98"
      },
      {
        "alias": "text",
        "value": "bloq-stringArray-advanced-type"
      },
      {
        "id": "TYPE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-stringArray-advanced-string",
            "value": "String *"
          },
          {
            "label": "bloq-stringArray-advanced-char",
            "value": "char *"
          }
        ]
      }
    ]
  ],
  "code": "({TYPE})malloc({VALUE}*sizeof({TYPE}.withoutAsterisk))",
  "returnType": {
    "type": "fromDropdown",
    "idDropdown": "TYPE",
    "options": "softwareVars"
  },
  "arduino": {
    "code": "({TYPE})malloc({VALUE}*sizeof(¬{TYPE.withoutAsterisk}))"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"stringArrayAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "length",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "String"
      ],
      "suggestedBloqs": [
        "selectVariable"
      ],
      "name": "6a0b1f87-1604-4e2d-9c45-b1d3f1ceb494"
    }
  ],
  "bloqClass": "bloq-length",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-length-length"
      },
      {
        "bloqInputId": "TEXT",
        "alias": "bloqInput",
        "acceptType": [
          "String"
        ],
        "suggestedBloqs": [
          "selectVariable"
        ],
        "name": "6a0b1f87-1604-4e2d-9c45-b1d3f1ceb494"
      }
    ]
  ],
  "code": "{TEXT}.length()",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "code": "{TEXT}.length()"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"length\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "string",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-string",
  "content": [
    [
      {
        "alias": "text",
        "value": "\""
      },
      {
        "id": "TEXT",
        "alias": "stringInput",
        "placeholder": "bloq-string-string"
      },
      {
        "alias": "text",
        "value": "\""
      }
    ]
  ],
  "code": "\"{TEXT}\"",
  "returnType": {
    "type": "simple",
    "value": "String"
  },
  "arduino": {
    "code": "\"{TEXT}\""
  },
  "python": {
    "codeLines": [
      {
        "code": "\"{TEXT}\""
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "stringArray",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-stringArray",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-stringArray-arraySize"
      },
      {
        "id": "VALUE",
        "alias": "numberInput",
        "value": 3
      },
      {
        "alias": "text",
        "value": "bloq-stringArray-stringType"
      }
    ]
  ],
  "code": "(String *)malloc({VALUE}*sizeof(String))",
  "returnType": {
    "type": "simple",
    "value": "String *"
  },
  "arduino": {
    "code": "(String *)malloc({VALUE}*sizeof(String))"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"stringArray\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "stringCreate",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "selectVariable"
      ],
      "name": "4949dd40-94c3-4a80-8c6a-d1a7a2a5ae95"
    }
  ],
  "bloqClass": "bloq-string-create",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-string-create-create"
      },
      {
        "bloqInputId": "TEXT",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable"
        ],
        "name": "4949dd40-94c3-4a80-8c6a-d1a7a2a5ae95"
      }
    ]
  ],
  "code": "String({TEXT})",
  "returnType": {
    "type": "simple",
    "value": "String"
  },
  "arduino": {
    "code": "String({TEXT})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"stringCreate\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "stringSum",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "String"
      ],
      "suggestedBloqs": [
        "string",
        "selectVariable"
      ],
      "name": "eb327364-9351-42fb-9c51-bee854aaf762"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "String"
      ],
      "suggestedBloqs": [
        "string",
        "selectVariable"
      ],
      "name": "7f9f122e-faac-4a09-adf2-50489ca636e3"
    }
  ],
  "bloqClass": "bloq-string-sum",
  "content": [
    [
      {
        "bloqInputId": "ARG1",
        "alias": "bloqInput",
        "acceptType": [
          "String"
        ],
        "suggestedBloqs": [
          "string",
          "selectVariable"
        ],
        "name": "eb327364-9351-42fb-9c51-bee854aaf762"
      },
      {
        "alias": "text",
        "value": "+"
      },
      {
        "bloqInputId": "ARG2",
        "alias": "bloqInput",
        "acceptType": [
          "String"
        ],
        "suggestedBloqs": [
          "string",
          "selectVariable"
        ],
        "name": "7f9f122e-faac-4a09-adf2-50489ca636e3"
      }
    ]
  ],
  "code": "String({ARG1})+String({ARG2})",
  "returnType": {
    "type": "simple",
    "value": "String"
  },
  "arduino": {
    "code": "String({ARG1})+String({ARG2})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"stringSum\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "arrayVariableAdvanced",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string",
        "selectVariable"
      ],
      "name": "07ebeada-2a01-46ac-9b61-928ca817b1e2"
    }
  ],
  "bloqClass": "bloq-array-variable",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-array-variable-variable"
      },
      {
        "id": "VAR",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      },
      {
        "alias": "text",
        "value": "["
      },
      {
        "bloqInputId": "POSITION",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable"
        ],
        "name": "07ebeada-2a01-46ac-9b61-928ca817b1e2"
      },
      {
        "alias": "text",
        "value": "]"
      }
    ]
  ],
  "code": "{VAR}[{POSITION}]",
  "returnType": {
    "type": "fromDynamicDropdown",
    "idDropdown": "VAR",
    "pointer": "true",
    "options": "softwareVars"
  },
  "arduino": {
    "code": "{VAR}[{POSITION}]"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"arrayVariableAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "declareArrayAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float",
        "int"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "797db12e-763c-4c37-9e4d-088e1dd7dd35"
    }
  ],
  "bloqClass": "bloq-declare-array",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-declare-array-declare"
      },
      {
        "id": "NAME",
        "alias": "varInput",
        "placeholder": "bloq-name-default"
      },
      {
        "alias": "text",
        "value": "bloq-declare-array-declare-type"
      },
      {
        "id": "TYPE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-declare-variable-declare-type-int",
            "value": "int"
          },
          {
            "label": "bloq-declare-variable-declare-type-float",
            "value": "float"
          },
          {
            "label": "bloq-declare-variable-declare-type-text",
            "value": "String"
          },
          {
            "label": "bloq-declare-variable-declare-type-char",
            "value": "char"
          },
          {
            "label": "bloq-declare-variable-declare-type-bool",
            "value": "bool"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-declare-array-declare-size"
      },
      {
        "bloqInputId": "VALUE",
        "alias": "bloqInput",
        "acceptType": [
          "float",
          "int"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "797db12e-763c-4c37-9e4d-088e1dd7dd35"
      }
    ]
  ],
  "createDynamicContent": "softwareVars",
  "returnType": {
    "type": "fromDropdown",
    "idDropdown": "TYPE"
  },
  "code": "{TYPE} {NAME} [{VALUE}];",
  "arduino": {
    "code": "{TYPE} {NAME} [{VALUE}];"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"declareArrayAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "declareVariableAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "basicOperations",
        "string",
        "stringSum",
        "char",
        "boolean"
      ],
      "name": "ae091533-903f-4bda-8837-e0def367008b"
    }
  ],
  "bloqClass": "bloq-declare-variable",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-declare-variable-declare"
      },
      {
        "id": "NAME",
        "alias": "varInput",
        "placeholder": "bloq-name-default"
      },
      {
        "alias": "text",
        "value": "bloq-declare-variable-declare-type"
      },
      {
        "id": "TYPE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-declare-variable-declare-type-int",
            "value": "int"
          },
          {
            "label": "bloq-declare-variable-declare-type-float",
            "value": "float"
          },
          {
            "label": "bloq-declare-variable-declare-type-text",
            "value": "String"
          },
          {
            "label": "bloq-declare-variable-declare-type-char",
            "value": "char"
          },
          {
            "label": "bloq-declare-variable-declare-type-bool",
            "value": "bool"
          }
        ]
      },
      {
        "alias": "text",
        "value": "="
      },
      {
        "bloqInputId": "VALUE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "basicOperations",
          "string",
          "stringSum",
          "char",
          "boolean"
        ],
        "name": "ae091533-903f-4bda-8837-e0def367008b"
      }
    ]
  ],
  "returnType": {
    "type": "fromDropdown",
    "idDropdown": "TYPE"
  },
  "createDynamicContent": "softwareVars",
  "code": "{TYPE} {NAME} = {VALUE};",
  "arduino": {
    "code": "{TYPE} {NAME} = {VALUE};"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"declareVariableAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "hwVariable",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-hw-variable-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-hw-variable-advanced-variable"
      },
      {
        "id": "COMPONENT",
        "alias": "dynamicDropdown",
        "options": "varComponents"
      }
    ]
  ],
  "code": "{COMPONENT}",
  "returnType": {
    "type": "fromDynamicDropdown",
    "idDropdown": "COMPONENT",
    "options": "varComponents"
  },
  "arduino": {
    "code": "{COMPONENT}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"hwVariable\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "setArrayVariableAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string",
        "selectVariable"
      ],
      "name": "8057fc24-40cc-48ba-8e64-bb31d596d75f"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "string",
        "selectVariable"
      ],
      "name": "83a94cf5-8490-4109-b5f4-1c28ac77c654"
    }
  ],
  "bloqClass": "bloq-set-variableArray",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-set-variableArray-variable"
      },
      {
        "id": "NAME",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      },
      {
        "alias": "text",
        "value": "["
      },
      {
        "bloqInputId": "ITERATOR",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable"
        ],
        "name": "8057fc24-40cc-48ba-8e64-bb31d596d75f"
      },
      {
        "alias": "text",
        "value": "]"
      },
      {
        "alias": "text",
        "value": "="
      },
      {
        "bloqInputId": "VALUE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable"
        ],
        "name": "83a94cf5-8490-4109-b5f4-1c28ac77c654"
      }
    ]
  ],
  "code": "{NAME}[{ITERATOR}] = {VALUE};",
  "arduino": {
    "code": "{NAME}[{ITERATOR}] = {VALUE};"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"setArrayVariableAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "arrayVariable",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-array-variable",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-array-variable-variable"
      },
      {
        "id": "VAR",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      },
      {
        "alias": "text",
        "value": "["
      },
      {
        "id": "POSITION",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "]"
      }
    ]
  ],
  "code": "{VAR}[{POSITION}]",
  "returnType": {
    "type": "fromDynamicDropdown",
    "idDropdown": "VAR",
    "pointer": "true",
    "options": "softwareVars"
  },
  "arduino": {
    "code": "{VAR}[{POSITION}]"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"arrayVariable\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "declareArray",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-declare-array",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-declare-array-declare"
      },
      {
        "id": "NAME",
        "alias": "varInput",
        "placeholder": "bloq-name-default"
      },
      {
        "alias": "text",
        "value": "bloq-declare-array-declare-type"
      },
      {
        "id": "TYPE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-declare-variable-declare-type-int",
            "value": "int"
          },
          {
            "label": "bloq-declare-variable-declare-type-float",
            "value": "float"
          },
          {
            "label": "bloq-declare-variable-declare-type-text",
            "value": "String"
          },
          {
            "label": "bloq-declare-variable-declare-type-char",
            "value": "char"
          },
          {
            "label": "bloq-declare-variable-declare-type-bool",
            "value": "bool"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-declare-array-declare-size"
      },
      {
        "id": "VALUE",
        "alias": "numberInput",
        "value": 3
      }
    ]
  ],
  "createDynamicContent": "softwareVars",
  "returnType": {
    "type": "fromDropdown",
    "idDropdown": "TYPE"
  },
  "code": "{TYPE} {NAME} [{VALUE}];",
  "arduino": {
    "code": "{TYPE} {NAME} [{VALUE}];"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"declareArray\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "declareVariable",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "basicOperations",
        "string",
        "stringSum"
      ],
      "name": "12aa4dcf-b30f-4336-b744-1165894bbe0b"
    }
  ],
  "bloqClass": "bloq-declare-variable",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-declare-variable-declare"
      },
      {
        "id": "NAME",
        "alias": "varInput",
        "placeholder": "bloq-name-default"
      },
      {
        "alias": "text",
        "value": "="
      },
      {
        "bloqInputId": "VALUE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "basicOperations",
          "string",
          "stringSum"
        ],
        "name": "12aa4dcf-b30f-4336-b744-1165894bbe0b"
      }
    ]
  ],
  "returnType": {
    "type": "fromInput",
    "bloqInputId": "VALUE"
  },
  "createDynamicContent": "softwareVars",
  "code": "{VALUE.connectionType} {NAME} = {VALUE};",
  "arduino": {
    "code": "@{VALUE.returnType} {NAME} = {VALUE};"
  },
  "python": {
    "codeLines": [
      {
        "code": "{NAME} = {VALUE}"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "swVariable",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-sw-variable-advanced",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-sw-variable-advanced-variable"
      },
      {
        "id": "VALUE",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      }
    ]
  ],
  "code": "{VALUE}",
  "returnType": {
    "type": "fromDynamicDropdown",
    "idDropdown": "VAR",
    "options": "softwareVars"
  },
  "arduino": {
    "code": "{VALUE}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"swVariable\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "selectVariable",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-select-variable",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-select-variable-variable"
      },
      {
        "id": "VAR",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      }
    ]
  ],
  "code": "{VAR}",
  "returnType": {
    "type": "fromDynamicDropdown",
    "idDropdown": "VAR",
    "options": "softwareVars"
  },
  "arduino": {
    "code": "{VAR}"
  },
  "python": {
    "codeLines": [
      {
        "code": "{VAR}"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "setArrayVariable",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": {
        "type": "fromDynamicDropdown",
        "idDropdown": "NAME",
        "pointer": "true",
        "options": "softwareVars"
      },
      "suggestedBloqs": [
        "number",
        "string",
        "selectVariable"
      ],
      "name": "39328933-ecd1-4ea3-ad0e-e55679d62fc1"
    }
  ],
  "bloqClass": "bloq-set-variableArray",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-set-variableArray-variable"
      },
      {
        "id": "NAME",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      },
      {
        "alias": "text",
        "value": "["
      },
      {
        "id": "ITERATOR",
        "alias": "numberInput",
        "value": 0
      },
      {
        "alias": "text",
        "value": "]"
      },
      {
        "alias": "text",
        "value": "="
      },
      {
        "bloqInputId": "VALUE",
        "alias": "bloqInput",
        "acceptType": {
          "type": "fromDynamicDropdown",
          "idDropdown": "NAME",
          "pointer": "true",
          "options": "softwareVars"
        },
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable"
        ],
        "name": "39328933-ecd1-4ea3-ad0e-e55679d62fc1"
      }
    ]
  ],
  "code": "{NAME}[{ITERATOR}] = {VALUE};",
  "arduino": {
    "code": "{NAME}[{ITERATOR}] = {VALUE};"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"setArrayVariable\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "setVariable",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": {
        "type": "fromDynamicDropdown",
        "idDropdown": "NAME",
        "options": "softwareVars"
      },
      "suggestedBloqs": [
        "number",
        "basicOperations",
        "string",
        "stringSum"
      ],
      "name": "2b32377b-230b-434b-b51c-58681afe8ee5"
    }
  ],
  "bloqClass": "bloq-set-variable",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-set-variable-variable"
      },
      {
        "id": "NAME",
        "alias": "dynamicDropdown",
        "options": "softwareVars"
      },
      {
        "alias": "text",
        "value": "="
      },
      {
        "bloqInputId": "VALUE",
        "alias": "bloqInput",
        "acceptType": {
          "type": "fromDynamicDropdown",
          "idDropdown": "NAME",
          "options": "softwareVars"
        },
        "suggestedBloqs": [
          "number",
          "basicOperations",
          "string",
          "stringSum"
        ],
        "name": "2b32377b-230b-434b-b51c-58681afe8ee5"
      }
    ]
  ],
  "code": "{NAME} = {VALUE};",
  "python": {
    "codeLines": [
      {
        "code": "{NAME} = {VALUE}"
      }
    ]
  },
  "arduino": {
    "code": "{NAME} = {VALUE};"
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "zowiButtons",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-zowi-buttons",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-buttons"
      },
      {
        "id": "BUTTON",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-buttons-A",
            "value": "PIN_AButton"
          },
          {
            "label": "bloq-zowi-buttons-B",
            "value": "PIN_BButton"
          }
        ]
      }
    ]
  ],
  "code": "digitalRead({BUTTON})",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "digitalRead({BUTTON})"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiButtons\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "zowiDistance",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-zowi-distance",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-distance-v1"
      }
    ]
  ],
  "code": "zowi.getDistance()",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.getDistance()"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiDistance\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiMouthAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-mouth",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-mouth-custom"
      },
      {
        "id": "BINARY",
        "alias": "numberInput",
        "value": "111111111111111111111111111111"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.putMouth(0b00{BINARY}, false);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiMouthAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiMovementsFront",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-movements-front",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-movements-simple-walk-v1"
      },
      {
        "id": "DIR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-forward",
            "value": "FORWARD"
          },
          {
            "label": "bloq-zowi-movements-backward",
            "value": "BACKWARD"
          }
        ]
      },
      {
        "id": "STEPS",
        "alias": "numberInput",
        "value": 4
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-speed"
      },
      {
        "id": "SPEED",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-speed-small",
            "value": "LOW_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-medium",
            "value": "MEDIUM_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-high",
            "value": "HIGH_SPEED"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-endtext"
      }
    ]
  ],
  "code": "zowi.walk({STEPS},{SPEED},{DIR});",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.walk({STEPS},{SPEED},{DIR});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiMovementsFront\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiMovementsHeightFront",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-movements-height-front",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-movements-simple-flapping-v1"
      },
      {
        "id": "DIR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-height-forward",
            "value": "FORWARD"
          },
          {
            "label": "bloq-zowi-movements-height-backward",
            "value": "BACKWARD"
          }
        ]
      },
      {
        "id": "STEPS",
        "alias": "numberInput",
        "value": 1
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-height-speed"
      },
      {
        "id": "SPEED",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-speed-small",
            "value": "LOW_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-medium",
            "value": "MEDIUM_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-high",
            "value": "HIGH_SPEED"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-height-height"
      },
      {
        "id": "HEIGHT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-height-small",
            "value": "SMALL_HEIGHT"
          },
          {
            "label": "bloq-zowi-movements-height-medium",
            "value": "MEDIUM_HEIGHT"
          },
          {
            "label": "bloq-zowi-movements-height-big",
            "value": "BIG_HEIGHT"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-height-endtext"
      }
    ]
  ],
  "code": "zowi.flapping({STEPS},{SPEED},{HEIGHT},{DIR});",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.flapping({STEPS},{SPEED},{HEIGHT},{DIR});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiMovementsHeightFront\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiMovementsHeightSides",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-movements-height-sides",
  "content": [
    [
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-simple-moonwalker-v1",
            "value": "moonwalker"
          },
          {
            "label": "bloq-zowi-movements-simple-crusaito-v1",
            "value": "crusaito"
          }
        ]
      },
      {
        "id": "DIR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-height-left",
            "value": "LEFT"
          },
          {
            "label": "bloq-zowi-movements-height-right",
            "value": "RIGHT"
          }
        ]
      },
      {
        "id": "STEPS",
        "alias": "numberInput",
        "value": 1
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-height-speed"
      },
      {
        "id": "SPEED",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-speed-small",
            "value": "LOW_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-medium",
            "value": "MEDIUM_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-high",
            "value": "HIGH_SPEED"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-height-height"
      },
      {
        "id": "HEIGHT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-height-small",
            "value": "SMALL_HEIGHT"
          },
          {
            "label": "bloq-zowi-movements-height-medium",
            "value": "MEDIUM_HEIGHT"
          },
          {
            "label": "bloq-zowi-movements-height-big",
            "value": "BIG_HEIGHT"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-height-endtext"
      }
    ]
  ],
  "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{HEIGHT},{DIR});",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{HEIGHT},{DIR});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiMovementsHeightSides\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiMovementsNoDir-v1",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-movements-no-dir-v1",
  "content": [
    [
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-simple-updown-v1",
            "value": "updown"
          },
          {
            "label": "bloq-zowi-movements-simple-swing-v1",
            "value": "swing"
          },
          {
            "label": "bloq-zowi-movements-simple-tiptoeSwing-v1",
            "value": "tiptoeSwing"
          },
          {
            "label": "bloq-zowi-movements-simple-jitter-v1",
            "value": "jitter"
          },
          {
            "label": "bloq-zowi-movements-simple-ascendingTurn-v1",
            "value": "ascendingTurn"
          }
        ]
      },
      {
        "id": "STEPS",
        "alias": "numberInput",
        "value": 4
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-no-dir-speed"
      },
      {
        "id": "SPEED",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-speed-small",
            "value": "LOW_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-medium",
            "value": "MEDIUM_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-high",
            "value": "HIGH_SPEED"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-no-dir-height"
      },
      {
        "id": "HEIGHT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-height-small",
            "value": "SMALL_HEIGHT"
          },
          {
            "label": "bloq-zowi-movements-height-medium",
            "value": "MEDIUM_HEIGHT"
          },
          {
            "label": "bloq-zowi-movements-height-big",
            "value": "BIG_HEIGHT"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-no-dir-endtext"
      }
    ]
  ],
  "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{HEIGHT});",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{HEIGHT});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiMovementsNoDir-v1\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiMovementsSides",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-movements-sides",
  "content": [
    [
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-simple-turn-v1",
            "value": "turn"
          },
          {
            "label": "bloq-zowi-movements-simple-shakeLeg-v1",
            "value": "shakeLeg"
          },
          {
            "label": "bloq-zowi-movements-simple-bend-v1",
            "value": "bend"
          }
        ]
      },
      {
        "id": "DIR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-left",
            "value": "LEFT"
          },
          {
            "label": "bloq-zowi-movements-right",
            "value": "RIGHT"
          }
        ]
      },
      {
        "id": "STEPS",
        "alias": "numberInput",
        "value": 4
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-speed"
      },
      {
        "id": "SPEED",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-speed-small",
            "value": "LOW_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-medium",
            "value": "MEDIUM_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-high",
            "value": "HIGH_SPEED"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-endtext"
      }
    ]
  ],
  "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{DIR});",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{DIR});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiMovementsSides\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "zowiSound",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-zowi-sound",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-sound-v1"
      }
    ]
  ],
  "code": "zowi.getNoise()",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.getNoise()"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiSound\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiComponentBuzzerAdvanced",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "cc82c6b7-23df-485e-9972-e8dfeca5fe01"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "a23e83fd-b478-4ff6-bd4b-960afc4048eb"
    }
  ],
  "bloqClass": "bloq-zowicomponent-buzzer-advance",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-sound"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-note"
      },
      {
        "bloqInputId": "NOTE",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "cc82c6b7-23df-485e-9972-e8dfeca5fe01"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-for"
      },
      {
        "bloqInputId": "SECONDS",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "a23e83fd-b478-4ff6-bd4b-960afc4048eb"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-advance-ms"
      }
    ]
  ],
  "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi._tone({NOTE}, {SECONDS}, 0);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiComponentBuzzerAdvanced\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiComponentBuzzer",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowicomponent-buzzer",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-buzzer-sound"
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-note"
      },
      {
        "id": "NOTE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-buzzer-do",
            "value": "261"
          },
          {
            "label": "bloq-buzzer-re",
            "value": "293"
          },
          {
            "label": "bloq-buzzer-mi",
            "value": "329"
          },
          {
            "label": "bloq-buzzer-fa",
            "value": "349"
          },
          {
            "label": "bloq-buzzer-sol",
            "value": "392"
          },
          {
            "label": "bloq-buzzer-la",
            "value": "440"
          },
          {
            "label": "bloq-buzzer-si",
            "value": "494"
          },
          {
            "label": "bloq-buzzer-do-#",
            "value": "277"
          },
          {
            "label": "bloq-buzzer-re-#",
            "value": "311"
          },
          {
            "label": "bloq-buzzer-fa-#",
            "value": "370"
          },
          {
            "label": "bloq-buzzer-sol-#",
            "value": "415"
          },
          {
            "label": "bloq-buzzer-la-#",
            "value": "466"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-for"
      },
      {
        "id": "SECONDS",
        "alias": "numberInput",
        "value": 2000
      },
      {
        "alias": "text",
        "value": "bloq-buzzer-ms"
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi._tone({NOTE}, {SECONDS}, 0);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiComponentBuzzer\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "zowiReadSensor",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-zowicomponent-read-sensor",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-read-read"
      },
      {
        "id": "SENSOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-button-A",
            "value": "buttonA"
          },
          {
            "label": "bloq-zowi-button-B",
            "value": "buttonB"
          },
          {
            "label": "bloq-zowi-sound-sensor",
            "value": "sound"
          },
          {
            "label": "bloq-zowi-us-sensor",
            "value": "us"
          }
        ]
      }
    ]
  ],
  "code": "",
  "returnType": {
    "type": "simple",
    "value": "float"
  },
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.readSensor(\"{SENSOR}\")"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiReadSensor\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "zowiSerialReceive",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-zowicomponent-serial-receiver",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowicomponent-serial-receive"
      }
    ]
  ],
  "code": "{SERIAL}.readString()",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.readString()"
  },
  "returnType": {
    "type": "simple",
    "value": "String"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiSerialReceive\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "output",
  "name": "zowiSerialReceiveInt",
  "connectors": [
    {
      "type": "connector--output",
      "accept": "connector--input"
    }
  ],
  "bloqClass": "bloq-zowicomponent-serial-receiver-int",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowicomponent-serial-receive-int"
      }
    ]
  ],
  "code": "{SERIAL}.readString()",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.readInt()"
  },
  "returnType": {
    "type": "simple",
    "value": "String"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiSerialReceiveInt\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiComponentSerialSend",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "all"
      ],
      "suggestedBloqs": [
        "string",
        "number",
        "selectVariable"
      ],
      "name": "3da171ae-b5ca-4a5b-b5cb-2585c356d05b"
    }
  ],
  "bloqClass": "bloq-zowicomponent-serial-send",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowicomponent-serial-send"
      },
      {
        "bloqInputId": "DATA",
        "alias": "bloqInput",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "number",
          "selectVariable"
        ],
        "name": "3da171ae-b5ca-4a5b-b5cb-2585c356d05b"
      },
      {
        "id": "LN",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-serial-send-println",
            "value": "true"
          },
          {
            "label": "bloq-serial-send-print",
            "value": "false"
          }
        ]
      }
    ]
  ],
  "code": "",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.serialSend({DATA}, {LN});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiComponentSerialSend\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiMovements",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-movements",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-movements"
      },
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-walk",
            "value": "walk"
          },
          {
            "label": "bloq-zowi-movements-turn",
            "value": "turn"
          },
          {
            "label": "bloq-zowi-movements-shakeLeg",
            "value": "shakeLeg"
          },
          {
            "label": "bloq-zowi-movements-bend",
            "value": "bend"
          }
        ]
      },
      {
        "id": "DIR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-forward",
            "value": "FORWARD"
          },
          {
            "label": "bloq-zowi-movements-backward",
            "value": "BACKWARD"
          },
          {
            "label": "bloq-zowi-movements-left",
            "value": "LEFT"
          },
          {
            "label": "bloq-zowi-movements-right",
            "value": "RIGHT"
          }
        ]
      },
      {
        "id": "STEPS",
        "alias": "numberInput",
        "value": 4
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-speed"
      },
      {
        "id": "SPEED",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-speed-small",
            "value": "LOW_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-medium",
            "value": "MEDIUM_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-high",
            "value": "HIGH_SPEED"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-endtext"
      }
    ]
  ],
  "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{DIR});",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.{MOVEMENT}({STEPS}, {SPEED}, {DIR});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiMovements\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiMovementsHeight",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-movements-height",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-movements-height"
      },
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-height-moonwalker",
            "value": "moonwalker"
          },
          {
            "label": "bloq-zowi-movements-height-crusaito",
            "value": "crusaito"
          },
          {
            "label": "bloq-zowi-movements-height-flapping",
            "value": "flapping"
          }
        ]
      },
      {
        "id": "DIR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-height-forward",
            "value": "FORWARD"
          },
          {
            "label": "bloq-zowi-movements-height-backward",
            "value": "BACKWARD"
          },
          {
            "label": "bloq-zowi-movements-height-left",
            "value": "LEFT"
          },
          {
            "label": "bloq-zowi-movements-height-right",
            "value": "RIGHT"
          }
        ]
      },
      {
        "id": "STEPS",
        "alias": "numberInput",
        "value": 1
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-height-speed"
      },
      {
        "id": "SPEED",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-speed-small",
            "value": "LOW_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-medium",
            "value": "MEDIUM_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-high",
            "value": "HIGH_SPEED"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-height-height"
      },
      {
        "id": "HEIGHT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-height-small",
            "value": "SMALL_HEIGHT"
          },
          {
            "label": "bloq-zowi-movements-height-medium",
            "value": "MEDIUM_HEIGHT"
          },
          {
            "label": "bloq-zowi-movements-height-big",
            "value": "BIG_HEIGHT"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-height-endtext"
      }
    ]
  ],
  "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{HEIGHT},{DIR});",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.{MOVEMENT}({STEPS}, {SPEED}, {HEIGHT}, {DIR});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiMovementsHeight\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiMovementsNoDir",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-movements-no-dir",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-movements-no-dir"
      },
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-no-dir-updown",
            "value": "updown"
          },
          {
            "label": "bloq-zowi-movements-no-dir-swing",
            "value": "swing"
          },
          {
            "label": "bloq-zowi-movements-no-dir-tiptoeSwing",
            "value": "tiptoeSwing"
          },
          {
            "label": "bloq-zowi-movements-no-dir-jitter",
            "value": "jitter"
          },
          {
            "label": "bloq-zowi-movements-no-dir-ascendingTurn",
            "value": "ascendingTurn"
          },
          {
            "label": "bloq-zowi-movements-no-dir-jump",
            "value": "jump"
          }
        ]
      },
      {
        "id": "STEPS",
        "alias": "numberInput",
        "value": 4
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-no-dir-speed"
      },
      {
        "id": "SPEED",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-speed-small",
            "value": "LOW_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-medium",
            "value": "MEDIUM_SPEED"
          },
          {
            "label": "bloq-zowi-movements-speed-high",
            "value": "HIGH_SPEED"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-no-dir-height"
      },
      {
        "id": "HEIGHT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-height-small",
            "value": "SMALL_HEIGHT"
          },
          {
            "label": "bloq-zowi-movements-height-medium",
            "value": "MEDIUM_HEIGHT"
          },
          {
            "label": "bloq-zowi-movements-height-big",
            "value": "BIG_HEIGHT"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-no-dir-endtext"
      }
    ]
  ],
  "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{HEIGHT});",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.{MOVEMENT}({STEPS}, {SPEED}, {HEIGHT});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiMovementsNoDir\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiGestures",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-gestures",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-gestures-v1"
      },
      {
        "id": "GESTURE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-gestures-ZowiHappy-v1",
            "value": "ZowiHappy"
          },
          {
            "label": "bloq-zowi-gestures-ZowiSuperHappy-v1",
            "value": "ZowiSuperHappy"
          },
          {
            "label": "bloq-zowi-gestures-ZowiSad-v1",
            "value": "ZowiSad"
          },
          {
            "label": "bloq-zowi-gestures-ZowiSleeping-v1",
            "value": "ZowiSleeping"
          },
          {
            "label": "bloq-zowi-gestures-ZowiFart-v1",
            "value": "ZowiFart"
          },
          {
            "label": "bloq-zowi-gestures-ZowiConfused-v1",
            "value": "ZowiConfused"
          },
          {
            "label": "bloq-zowi-gestures-ZowiLove-v1",
            "value": "ZowiLove"
          },
          {
            "label": "bloq-zowi-gestures-ZowiAngry-v1",
            "value": "ZowiAngry"
          },
          {
            "label": "bloq-zowi-gestures-ZowiFretful-v1",
            "value": "ZowiFretful"
          },
          {
            "label": "bloq-zowi-gestures-ZowiVictory-v1",
            "value": "ZowiVictory"
          },
          {
            "label": "bloq-zowi-gestures-ZowiFail-v1",
            "value": "ZowiFail"
          }
        ]
      }
    ]
  ],
  "code": "zowi.playGesture({GESTURE});",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.playGesture({GESTURE});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiGestures\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiHome",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-rest",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-rest-v1"
      }
    ]
  ],
  "code": "zowi.home();",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.home();"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiHome\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "zowiIfButtons",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "all",
        "ifDown"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-if-buttons",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-if-buttons"
      },
      {
        "id": "BUTTON",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "A",
            "value": "PIN_AButton"
          },
          {
            "label": "B",
            "value": "PIN_BButton"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-if-buttons-then-v1"
      }
    ]
  ],
  "code": "if(digitalRead({BUTTON}) == 1){{STATEMENTS}}",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "if(digitalRead({BUTTON}) == 1){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiIfButtons\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "zowiIfDistance",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "all",
        "ifDown"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-if-distance",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-if-distance"
      },
      {
        "id": "OPERATOR",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-if-distance-less",
            "value": "<"
          },
          {
            "label": "bloq-zowi-if-distance-more",
            "value": ">"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-if-distance-than"
      },
      {
        "id": "DISTANCE",
        "alias": "numberInput",
        "value": 15
      },
      {
        "alias": "text",
        "value": "bloq-zowi-if-distance-then-v1"
      }
    ]
  ],
  "code": "if(zowi.getDistance() {OPERATOR} {DISTANCE}){{STATEMENTS}}",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "if(zowi.getDistance() {OPERATOR} {DISTANCE}){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiIfDistance\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement-input",
  "name": "zowiIfSound",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top",
      "acceptedAliases": [
        "all",
        "ifDown"
      ]
    },
    {
      "type": "connector--root",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-if-sound",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-if-sound-v1"
      }
    ]
  ],
  "code": " if(zowi.getNoise() >= 650){{STATEMENTS}}",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": " if(zowi.getNoise() >= 650){{STATEMENTS}}"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiIfSound\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiMouth",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-mouth",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-mouth-v1"
      },
      {
        "id": "GESTURE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-mouth-smile",
            "value": "smile_code"
          },
          {
            "label": "bloq-zowi-mouth-sad",
            "value": "sad_code"
          },
          {
            "label": "bloq-zowi-mouth-happy",
            "value": "happyOpen_code"
          },
          {
            "label": "bloq-zowi-mouth-confused",
            "value": "confused_code"
          },
          {
            "label": "bloq-zowi-mouth-bigSurprise",
            "value": "bigSurprise_code"
          },
          {
            "label": "bloq-zowi-mouth-tongueOut",
            "value": "tongueOut_code"
          }
        ]
      },
      {
        "alias": "text",
        "value": "bloq-zowi-mouth-mouth"
      }
    ]
  ],
  "code": "zowi.putMouth({GESTURE}, false);",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.putMouth({GESTURE}, false);"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiMouth\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiMovementsSimple",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-movements-simple",
  "content": [
    [
      {
        "id": "MOVEMENT",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-movements-simple-walk-v1",
            "value": "walk"
          },
          {
            "label": "bloq-zowi-movements-simple-turn-v1",
            "value": "turn"
          },
          {
            "label": "bloq-zowi-movements-simple-shakeLeg-v1",
            "value": "shakeLeg"
          },
          {
            "label": "bloq-zowi-movements-simple-bend-v1",
            "value": "bend"
          },
          {
            "label": "bloq-zowi-movements-simple-moonwalker-v1",
            "value": "moonwalker"
          },
          {
            "label": "bloq-zowi-movements-simple-crusaito-v1",
            "value": "crusaito"
          },
          {
            "label": "bloq-zowi-movements-simple-flapping-v1",
            "value": "flapping"
          },
          {
            "label": "bloq-zowi-movements-simple-updown-v1",
            "value": "updown"
          },
          {
            "label": "bloq-zowi-movements-simple-swing-v1",
            "value": "swing"
          },
          {
            "label": "bloq-zowi-movements-simple-tiptoeSwing-v1",
            "value": "tiptoeSwing"
          },
          {
            "label": "bloq-zowi-movements-simple-jitter-v1",
            "value": "jitter"
          },
          {
            "label": "bloq-zowi-movements-simple-ascendingTurn-v1",
            "value": "ascendingTurn"
          },
          {
            "label": "bloq-zowi-movements-simple-jump-v1",
            "value": "jump"
          }
        ]
      },
      {
        "id": "STEPS",
        "alias": "numberInput",
        "value": 4
      },
      {
        "alias": "text",
        "value": "bloq-zowi-movements-simple-steps"
      }
    ]
  ],
  "code": "zowi.{MOVEMENT}({STEPS});",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.{MOVEMENT}({STEPS});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiMovementsSimple\" no preparado para generar código python"
      }
    ]
  }
});
db.bitbloq_Bloqs.insert({
  "type": "statement",
  "name": "zowiSounds",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    }
  ],
  "bloqClass": "bloq-zowi-sounds",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-zowi-sounds-v1"
      },
      {
        "id": "SOUND",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-zowi-sounds-surprise",
            "value": "S_surprise"
          },
          {
            "label": "bloq-zowi-sounds-OhOoh",
            "value": "S_OhOoh"
          },
          {
            "label": "bloq-zowi-sounds-cuddly",
            "value": "S_cuddly"
          },
          {
            "label": "bloq-zowi-sounds-sleeping",
            "value": "S_sleeping"
          },
          {
            "label": "bloq-zowi-sounds-happy",
            "value": "S_happy"
          },
          {
            "label": "bloq-zowi-sounds-sad",
            "value": "S_sad"
          },
          {
            "label": "bloq-zowi-sounds-confused",
            "value": "S_confused"
          },
          {
            "label": "bloq-zowi-sounds-fart1-v1",
            "value": "S_fart1"
          }
        ]
      }
    ]
  ],
  "code": "zowi.sing({SOUND});",
  "arduino": {
    "includes": [
      "BitbloqZowi.h",
      "BitbloqUS.h",
      "BitbloqBatteryReader.h",
      "BitbloqLedMatrix.h",
      "Servo.h",
      "BitbloqOscillator.h",
      "EEPROM.h"
    ],
    "needInstanceOf": [
      {
        "name": "zowi",
        "type": "Zowi"
      }
    ],
    "setupExtraCode": "zowi.init();",
    "code": "zowi.sing({SOUND});"
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"zowiSounds\" no preparado para generar código python"
      }
    ]
  }
});
